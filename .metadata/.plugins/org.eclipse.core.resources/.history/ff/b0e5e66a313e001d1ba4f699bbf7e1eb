/***************************************************************************//**
 * @file
 * @brief main() function.
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/
#include "sl_component_catalog.h"
#include "sl_system_init.h"
#include "app.h"
#include "em_device.h"
#include "em_chip.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_eusart.h"
#include "em_gpio.h"
#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)
#include "sl_power_manager.h"
#endif // SL_CATALOG_POWER_MANAGER_PRESENT
#if defined(SL_CATALOG_KERNEL_PRESENT)
#include "sl_system_kernel.h"
#else // !SL_CATALOG_KERNEL_PRESENT
#include "sl_system_process_action.h"
#endif // SL_CATALOG_KERNEL_PRESENT

#include "acc_hal_definitions.h"
#include "acc_hal_integration.h"
#include "acc_rss.h"
#include "acc_rss_assembly_test.h"
#include "acc_version.h"

int main(void) {
	// Initialize Silicon Labs device, system, service(s) and protocol stack(s).
	// Note that if the kernel is present, processing task(s) will be created by
	// this call.
	sl_system_init();

	// Initialize the application. For example, create periodic timer(s) or
	// task(s) if the kernel is present.
	app_init();
	const acc_hal_t *hal = acc_hal_integration_get_implementation();

	if (!acc_rss_activate(hal)) {
		return EXIT_FAILURE;
	}


#if defined(SL_CATALOG_KERNEL_PRESENT)
  // Start the kernel. Task(s) created in app_init() will start running.
  sl_system_kernel_start();
#else // SL_CATALOG_KERNEL_PRESENT
	while (1) {
		// Do not remove this call: Silicon Labs components process action routine
		// must be called from the super loop.
		sl_system_process_action();

		// Application process.
		app_process_action();

#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)
		// Let the CPU go to sleep if the system allows it.
		sl_power_manager_sleep();
#endif
	}
	// Clean-up when exiting the application.
	app_exit();
#endif // SL_CATALOG_KERNEL_PRESENT
}

void initEUSART1(void) {
	CMU_ClockEnable(cmuClock_EUSART1, true);

	// SPI advanced configuration (part of the initializer)
	EUSART_SpiAdvancedInit_TypeDef adv = EUSART_SPI_ADVANCED_INIT_DEFAULT;

	adv.msbFirst = true;        // SPI standard MSB first

	// Default asynchronous initializer (main/master mode and 8-bit data)
	EUSART_SpiInit_TypeDef init = EUSART_SPI_MASTER_INIT_DEFAULT_HF;

	init.bitRate = 1000000;        // 1 MHz shift clock
	init.advancedSettings = &adv;  // Advanced settings structure

	/*
	 * Route EUSART1 MOSI, MISO, and SCLK to the specified pins.  CS is
	 * not controlled by EUSART1 so there is no write to the corresponding
	 * EUSARTROUTE register to do this.
	 */
	GPIO->EUSARTROUTE[1].TXROUTE = (A111_MOSI_PORT
			<< _GPIO_EUSART_TXROUTE_PORT_SHIFT)
			| (A111_MOSI_PIN << _GPIO_EUSART_TXROUTE_PIN_SHIFT);
	GPIO->EUSARTROUTE[1].RXROUTE = (A111_MISO_PORT
			<< _GPIO_EUSART_RXROUTE_PORT_SHIFT)
			| (A111_MISO_PIN << _GPIO_EUSART_RXROUTE_PIN_SHIFT);
	GPIO->EUSARTROUTE[1].SCLKROUTE = (A111_SCLK_PORT
			<< _GPIO_EUSART_SCLKROUTE_PORT_SHIFT)
			| (A111_SCLK_PIN << _GPIO_EUSART_SCLKROUTE_PIN_SHIFT);

	// Enable EUSART interface pins
	GPIO->EUSARTROUTE[1].ROUTEEN = GPIO_EUSART_ROUTEEN_RXPEN |    // MISO
			GPIO_EUSART_ROUTEEN_TXPEN |    // MOSI
			GPIO_EUSART_ROUTEEN_SCLKPEN;

	// Configure and enable EUSART1
	EUSART_SpiInit(EUSART1, &init);
}
