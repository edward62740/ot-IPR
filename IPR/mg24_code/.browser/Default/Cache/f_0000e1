{"html":"\n      <article>\n        <div class=\"header\">\n  \n  <div class=\"headertitle\">\n  <h1 class=\"title\">USART - Synchronous/Asynchronous Serial<\/h1><\/div>\n<\/div><!--header-->\n<div class=\"contents\">\n<a name=\"details\" id=\"details\"><\/a><h2 class=\"groupheader\">Description<\/h2>\n<p>Universal Synchronous/Asynchronous Receiver/Transmitter Peripheral API. <\/p>\n<p>The Universal Synchronous/Asynchronous Receiver/Transmitter (USART) is a very flexible serial I/O module. It supports full duplex asynchronous UART communication as well as RS-485, SPI, MicroWire, and 3-wire. It can also interface with ISO7816 Smart-Cards, and IrDA devices.<\/p>\n<p>The USART has a wide selection of operating modes, frame formats, and baud rates. All features are supported through the API of this module.<\/p>\n<p>Triple buffering and DMA support makes high data-rates possible with minimal CPU intervention. It is possible to transmit and receive large frames while the MCU remains in EM1 Sleep.<\/p>\n<p>This module does not support DMA configuration. The UARTDRV and SPIDRV drivers provide full support for DMA and more.<\/p>\n<p>The following steps are necessary for basic operation:<\/p>\n<p>Clock enable: <\/p><div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#if !defined(_SILICON_LABS_32B_SERIES_2)<\/span><\/div>\n<div class=\"line\"><span class=\"comment\">/* USART is a HFPERCLK peripheral. Enable HFPERCLK domain and USART0.<\/span><\/div>\n<div class=\"line\"><span class=\"comment\"> * We also need to enable the clock for GPIO to configure pins. */<\/span><\/div>\n<div class=\"line\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-cmu#ga93913d50050d52b38b0a7c7c08ac81e8\" class=\"code\" target=\"_blank\">CMU_ClockEnable<\/a>(cmuClock_HFPER, <span class=\"keyword\">true<\/span>);<\/div>\n<div class=\"line\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-cmu#ga93913d50050d52b38b0a7c7c08ac81e8\" class=\"code\" target=\"_blank\">CMU_ClockEnable<\/a>(<a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-cmu#gga519ea66a1a21e07f2d1cccc9aa55799ea2e4303bd5d4d286296195dc36619b08c\" class=\"code\" target=\"_blank\">cmuClock_USART0<\/a>, <span class=\"keyword\">true<\/span>);<\/div>\n<div class=\"line\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-cmu#ga93913d50050d52b38b0a7c7c08ac81e8\" class=\"code\" target=\"_blank\">CMU_ClockEnable<\/a>(<a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-cmu#gga519ea66a1a21e07f2d1cccc9aa55799eaadef20e56d0b5f877854266fefb9d7d9\" class=\"code\" target=\"_blank\">cmuClock_GPIO<\/a>, <span class=\"keyword\">true<\/span>);<\/div>\n<div class=\"line\"><span class=\"preprocessor\">#endif<\/span><\/div>\n<\/div><!-- fragment --><p>To initialize the USART for asynchronous operation (e.g., UART): <\/p><div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* Initialize with default settings and then update fields according to application requirements. */<\/span><\/div>\n<div class=\"line\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-async-type-def\" class=\"code\" target=\"_blank\">USART_InitAsync_TypeDef<\/a> initAsync = <a href=\"#gadc8f891a4bd89e12d447801bad5ba108\" class=\"code\">USART_INITASYNC_DEFAULT<\/a>;<\/div>\n<div class=\"line\">initAsync.<a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-async-type-def#a855780b7add2ef1015437999b40df6f7\" class=\"code\" target=\"_blank\">baudrate<\/a> = 38400;<\/div>\n<div class=\"line\"><a href=\"#ga5b851444f0fbdca97017c7b927b37f52\" class=\"code\">USART_InitAsync<\/a>(USART0, &amp;initAsync);<\/div>\n<\/div><!-- fragment --><p>To initialize the USART for synchronous operation (e.g., SPI): <\/p><div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* Initialize with default settings and then update fields according to application requirements. */<\/span><\/div>\n<div class=\"line\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def\" class=\"code\" target=\"_blank\">USART_InitSync_TypeDef<\/a> initSync = <a href=\"#gaaf3d1a75faf77eca583c62339c005712\" class=\"code\">USART_INITSYNC_DEFAULT<\/a>;<\/div>\n<div class=\"line\"><span class=\"comment\">/* Operate as SPI master */<\/span><\/div>\n<div class=\"line\">initSync.<a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def#a7fa8a23b2760a83766019d3309169386\" class=\"code\" target=\"_blank\">master<\/a> = <span class=\"keyword\">true<\/span>;<\/div>\n<div class=\"line\"><span class=\"comment\">/* Clock idle low, sample on falling edge. */<\/span><\/div>\n<div class=\"line\">initSync.<a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def#a23bd97977067389aa6a48707e2789c05\" class=\"code\" target=\"_blank\">clockMode<\/a> = <a href=\"#gga9308807377a9f1b25c19bc60d9f64674a8084853059cd3bfd2fb020299d3da687\" class=\"code\">usartClockMode1<\/a>;<\/div>\n<div class=\"line\"><a href=\"#gaab6053ba081f6fabce6762fb4563fb28\" class=\"code\">USART_InitSync<\/a>(USART0, &amp;initSync);<\/div>\n<\/div><!-- fragment --><p>After pins are assigned for the application/board, enable pins at the desired location. Available locations can be obtained from the Pin Definitions section in the data sheet. <\/p><dl class=\"section note\"><dt>Note<\/dt><dd>UARTDRV supports all types of UART flow control. Software assisted hardware flow control is available for parts without true UART hardware flow control. <\/dd><\/dl>\n<table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"nested-classes\"><\/a>\nData Structures<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-async-type-def\" class=\"el\" target=\"_blank\">USART_InitAsync_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Asynchronous mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-prs-trigger-init-type-def\" class=\"el\" target=\"_blank\">USART_PrsTriggerInit_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">USART PRS trigger enable.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def\" class=\"el\" target=\"_blank\">USART_InitSync_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Synchronous mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-ir-d-a-type-def\" class=\"el\" target=\"_blank\">USART_InitIrDA_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">IrDA mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-i2s-type-def\" class=\"el\" target=\"_blank\">USART_InitI2s_TypeDef<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">I2S mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"><\/a>\nFunctions<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga373a66831daf2d2fe59c04b327e0c9a1\" class=\"el\">USART_BaudrateAsyncSet<\/a> (USART_TypeDef *usart, uint32_t refFreq, uint32_t baudrate, <a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a> ovs)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Configure USART/UART operating in asynchronous mode to use a given baudrate (or as close as possible to a specified baudrate).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac3af64b304f10a2ea679526f8fe3a9fb\" class=\"el\">USART_BaudrateCalc<\/a> (uint32_t refFreq, uint32_t clkdiv, bool syncmode, <a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a> ovs)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Calculate baudrate for USART/UART given reference frequency, clock division, and oversampling rate (if async mode).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga9f78987c84c2023fe907867833cdfab4\" class=\"el\">USART_BaudrateGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get the current baudrate for USART/UART.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga5b96146f7c05f78d31bd77aacd4a3b5f\" class=\"el\">USART_BaudrateSyncSet<\/a> (USART_TypeDef *usart, uint32_t refFreq, uint32_t baudrate)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Configure the USART operating in synchronous mode to use a given baudrate (or as close as possible to a specified baudrate).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf593db61ee6acd852dd9dc01d79a3548\" class=\"el\">USART_Enable<\/a> (USART_TypeDef *usart, <a href=\"#gab911b3b57b0cfe33cc34e7c37693c14b\" class=\"el\">USART_Enable_TypeDef<\/a> enable)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable/disable USART/UART receiver and/or transmitter.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga5b851444f0fbdca97017c7b927b37f52\" class=\"el\">USART_InitAsync<\/a> (USART_TypeDef *usart, const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-async-type-def\" class=\"el\" target=\"_blank\">USART_InitAsync_TypeDef<\/a> *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize USART/UART for normal asynchronous mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaab6053ba081f6fabce6762fb4563fb28\" class=\"el\">USART_InitSync<\/a> (USART_TypeDef *usart, const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def\" class=\"el\" target=\"_blank\">USART_InitSync_TypeDef<\/a> *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize USART for synchronous mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaefd1e61b7282c062406cc5b4eb0e8e98\" class=\"el\">USARTn_InitIrDA<\/a> (USART_TypeDef *usart, const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-ir-d-a-type-def\" class=\"el\" target=\"_blank\">USART_InitIrDA_TypeDef<\/a> *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize USART for asynchronous IrDA mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaa3973304191a67c1b6e837d8b6cc2197\" class=\"el\">USART_InitI2s<\/a> (USART_TypeDef *usart, <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-i2s-type-def\" class=\"el\" target=\"_blank\">USART_InitI2s_TypeDef<\/a> *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize USART for I2S mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0deb307dc635809644280bd95dca6301\" class=\"el\">USART_InitPrsTrigger<\/a> (USART_TypeDef *usart, const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-prs-trigger-init-type-def\" class=\"el\" target=\"_blank\">USART_PrsTriggerInit_TypeDef<\/a> *init)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initialize the automatic transmissions using PRS channel as a trigger.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga4769e1b5d573d6cecc95ca0c7d8e2da2\" class=\"el\">USART_Reset<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Reset USART/UART to the same state that it was in after a hardware reset.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga85160dfc5405a7fd0f35948fc45450df\" class=\"el\">USART_Rx<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 4-8 bit frame, (or part of 10-16 bit frame).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab9ce412ba8931aa7087b2f3e79b9f315\" class=\"el\">USART_RxDouble<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive two 4-8 bit frames or one 10-16 bit frame.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac7f32fb42fbf27b2f8c0fbcc86b54813\" class=\"el\">USART_RxDoubleExt<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive two 4-9 bit frames, or one 10-16 bit frame with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga93710bf6c5a6c6eff97644bc40ba80c6\" class=\"el\">USART_RxExt<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 4-9 bit frame (or part of 10-16 bit frame) with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gad1ce52fc0a8a5a618fffd614b086c46c\" class=\"el\">USART_SpiTransfer<\/a> (USART_TypeDef *usart, uint8_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Perform one 8 bit frame SPI transfer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gabdac7c0c6cc0b6aa998bf8d688f46591\" class=\"el\">USART_Tx<\/a> (USART_TypeDef *usart, uint8_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit one 4-9 bit frame.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gabeab88ec2b2fd0fee0b1b42f8aa4f69b\" class=\"el\">USART_TxDouble<\/a> (USART_TypeDef *usart, uint16_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit two 4-9 bit frames or one 10-16 bit frame.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga3a032f4772d7f52a50bc497b15bcd41b\" class=\"el\">USART_TxDoubleExt<\/a> (USART_TypeDef *usart, uint32_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit two 4-9 bit frames or one 10-16 bit frame with extended control.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga8ff633e12b44c4032366a859d07f9766\" class=\"el\">USART_TxExt<\/a> (USART_TypeDef *usart, uint16_t data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Transmit one 4-9 bit frame with extended control.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga48f14b997f4fc24fcdcce6f2c04b2cba\" class=\"el\">USART_IntClear<\/a> (USART_TypeDef *usart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Clear one or more pending USART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga4fd00651a4209fa9bd9bf181a4ff9eea\" class=\"el\">USART_IntDisable<\/a> (USART_TypeDef *usart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Disable one or more USART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga45215f22f4c0b4c27f2a94315acd58e7\" class=\"el\">USART_IntEnable<\/a> (USART_TypeDef *usart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable one or more USART interrupts.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga34bad697ee9793eb89b57a380b4d0f8c\" class=\"el\">USART_IntGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get pending USART interrupt flags.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga3f0626056b94a9a2994b8108129676d8\" class=\"el\">USART_IntGetEnabled<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get enabled and pending USART interrupt flags.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga1c5e9331c28d01b0535cf98fc67b4b10\" class=\"el\">USART_IntSet<\/a> (USART_TypeDef *usart, uint32_t flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Set one or more pending USART interrupts from SW.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf4092654653063bb2b73da85cc7b3f2b\" class=\"el\">USART_StatusGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get USART STATUS register.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaecc76b15ac6395ea6e5d164bc5ac5d1c\" class=\"el\">USART_RxDataGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 4-8 bit frame, (or part of 10-16 bit frame).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga9bcf0da96c9099b4b3d6b545e792ead5\" class=\"el\">USART_RxDoubleGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive two 4-8 bit frames, or one 10-16 bit frame.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7b05f0ea94b3df231c31118872619a4c\" class=\"el\">USART_RxDoubleXGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive two 4-9 bit frames, or one 10-16 bit frame with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint16_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga87a26373115903e9e6866d769f64e790\" class=\"el\">USART_RxDataXGet<\/a> (USART_TypeDef *usart)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Receive one 4-9 bit frame, (or part of 10-16 bit frame) with extended information.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"define-members\"><\/a>\nMacros<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gadc8f891a4bd89e12d447801bad5ba108\" class=\"el\">USART_INITASYNC_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for USART asynchronous initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga8a1b203a68a8c787938fd30cd3ac6935\" class=\"el\">USART_INITPRSTRIGGER_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for USART PRS triggering structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaaf3d1a75faf77eca583c62339c005712\" class=\"el\">USART_INITSYNC_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for USART sync initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7e493420d94db772e10afe78524af68e\" class=\"el\">USART_INITIRDA_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for IrDA mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">#define&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga1bdea4295e7eb51c4f3ef40ec5af006f\" class=\"el\">USART_INITI2S_DEFAULT<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Default configuration for I2S mode initialization structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"typedef-members\"><\/a>\nTypedefs<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef uint8_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga284a3fe4892ec7fa45af23127937121b\" class=\"el\">USART_PRS_Channel_t<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">PRS Channel type.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"enum-members\"><\/a>\nEnumerations<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga882a4def49cdb2fb18622d61b24eeacd\" class=\"el\">USART_Databits_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacdadebca990738b5483158bf21c58e25062\" class=\"el\">usartDatabits4<\/a> = USART_FRAME_DATABITS_FOUR, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacdad31e812dbed189d313987dd6716a293a\" class=\"el\">usartDatabits5<\/a> = USART_FRAME_DATABITS_FIVE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda75a5514c0ba5fc1459b6dcacd3d7a393\" class=\"el\">usartDatabits6<\/a> = USART_FRAME_DATABITS_SIX, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda39f012f6d3d52b40d8d3a56b247fce62\" class=\"el\">usartDatabits7<\/a> = USART_FRAME_DATABITS_SEVEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacdac41acc4a2e22f437bc449a70b6ce485b\" class=\"el\">usartDatabits8<\/a> = USART_FRAME_DATABITS_EIGHT, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda226752514b18d44ebe846cbbb71a8638\" class=\"el\">usartDatabits9<\/a> = USART_FRAME_DATABITS_NINE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacdaec84cf074763661a58f25778dacd067a\" class=\"el\">usartDatabits10<\/a> = USART_FRAME_DATABITS_TEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda7f229fe002e5cb9e12c5df747ff159cd\" class=\"el\">usartDatabits11<\/a> = USART_FRAME_DATABITS_ELEVEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda1d36841ce57623a820b2ca45c819cc39\" class=\"el\">usartDatabits12<\/a> = USART_FRAME_DATABITS_TWELVE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda0f6364e103ec3b73c2e9016ec0d0b3b1\" class=\"el\">usartDatabits13<\/a> = USART_FRAME_DATABITS_THIRTEEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda3a2b1a633fd85f407e15f7d25860d2e8\" class=\"el\">usartDatabits14<\/a> = USART_FRAME_DATABITS_FOURTEEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacdaed811871858ca941c0fa6ed0a8f96d2a\" class=\"el\">usartDatabits15<\/a> = USART_FRAME_DATABITS_FIFTEEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga882a4def49cdb2fb18622d61b24eeacda93fce2f8cbf2bb29a967580db20e8734\" class=\"el\">usartDatabits16<\/a> = USART_FRAME_DATABITS_SIXTEEN\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Databit selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab911b3b57b0cfe33cc34e7c37693c14b\" class=\"el\">USART_Enable_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#ggab911b3b57b0cfe33cc34e7c37693c14ba7d35b8fed019bb16bfc28f64152303fd\" class=\"el\">usartDisable<\/a> = 0x0, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab911b3b57b0cfe33cc34e7c37693c14baaf7b7b0cf882128213e8d5e5c61290b9\" class=\"el\">usartEnableRx<\/a> = USART_CMD_RXEN, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab911b3b57b0cfe33cc34e7c37693c14ba7ed050fc1c7868d3f6cbc877602aaed5\" class=\"el\">usartEnableTx<\/a> = USART_CMD_TXEN, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab911b3b57b0cfe33cc34e7c37693c14ba2abb81782e20df3531cab7e13a0cb9de\" class=\"el\">usartEnable<\/a> = (USART_CMD_RXEN | USART_CMD_TXEN)\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Enable selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#ggab8f135534a77aba5382a820b2a35a284a4edad78d0db280db3a3edede718b1bce\" class=\"el\">usartOVS16<\/a> = USART_CTRL_OVS_X16, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8f135534a77aba5382a820b2a35a284a2b885ba8c997e64c82c719cd46535036\" class=\"el\">usartOVS8<\/a> = USART_CTRL_OVS_X8, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8f135534a77aba5382a820b2a35a284acd17f36e920765b705f86c1726c28869\" class=\"el\">usartOVS6<\/a> = USART_CTRL_OVS_X6, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8f135534a77aba5382a820b2a35a284a49a8f2ea890378f69a6cbbc2915c7315\" class=\"el\">usartOVS4<\/a> = USART_CTRL_OVS_X4\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Oversampling selection, used for asynchronous operation.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga57d987f474e5fd47d4760c4178c7f0d5\" class=\"el\">USART_Parity_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga57d987f474e5fd47d4760c4178c7f0d5a625e8e546c8d8f83b3b6ac814ace927a\" class=\"el\">usartNoParity<\/a> = USART_FRAME_PARITY_NONE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga57d987f474e5fd47d4760c4178c7f0d5a36c08e984707c54f735f4be7b3b656cc\" class=\"el\">usartEvenParity<\/a> = USART_FRAME_PARITY_EVEN, \n<br>\n&nbsp;&nbsp;<a href=\"#gga57d987f474e5fd47d4760c4178c7f0d5a858c7e3ca4c38ad15f0330d64b29ba76\" class=\"el\">usartOddParity<\/a> = USART_FRAME_PARITY_ODD\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Parity selection, mainly used for asynchronous operation.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga697bdb6e146a4f6b8e761efc4f31065e\" class=\"el\">USART_Stopbits_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga697bdb6e146a4f6b8e761efc4f31065ea52f2bbad2d75d01a5d87b7d99c4cf8bb\" class=\"el\">usartStopbits0p5<\/a> = USART_FRAME_STOPBITS_HALF, \n<br>\n&nbsp;&nbsp;<a href=\"#gga697bdb6e146a4f6b8e761efc4f31065ea41a16eb6b014abeef340c0b219dcb470\" class=\"el\">usartStopbits1<\/a> = USART_FRAME_STOPBITS_ONE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga697bdb6e146a4f6b8e761efc4f31065ea3dff4354686ccd03c04dd950107bb371\" class=\"el\">usartStopbits1p5<\/a> = USART_FRAME_STOPBITS_ONEANDAHALF, \n<br>\n&nbsp;&nbsp;<a href=\"#gga697bdb6e146a4f6b8e761efc4f31065ea7b97131b5cebe4ca1b398baf6d3e1909\" class=\"el\">usartStopbits2<\/a> = USART_FRAME_STOPBITS_TWO\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Stop bits selection, used for asynchronous operation.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7a113149a13b20ef5781015cf44082e4\" class=\"el\">USART_HwFlowControl_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga7a113149a13b20ef5781015cf44082e4a89aaf3d44fffd6bb201b09a2a51f7ff1\" class=\"el\">usartHwFlowControlNone<\/a> = 0, \n<br>\n&nbsp;&nbsp;<a href=\"#gga7a113149a13b20ef5781015cf44082e4afd332860f3bb02ad2a4b09a8b5fd676b\" class=\"el\">usartHwFlowControlCts<\/a>, \n<br>\n&nbsp;&nbsp;<a href=\"#gga7a113149a13b20ef5781015cf44082e4a8dbe2de67ddcba24f9ad69c035870301\" class=\"el\">usartHwFlowControlRts<\/a>, \n<br>\n&nbsp;&nbsp;<a href=\"#gga7a113149a13b20ef5781015cf44082e4ae2ef018b6e75d59758a69e19cdde882e\" class=\"el\">usartHwFlowControlCtsAndRts<\/a>\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Hardware Flow Control Selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga9308807377a9f1b25c19bc60d9f64674\" class=\"el\">USART_ClockMode_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga9308807377a9f1b25c19bc60d9f64674a46a93474ca796f5506715ad9f8c42708\" class=\"el\">usartClockMode0<\/a> = USART_CTRL_CLKPOL_IDLELOW | USART_CTRL_CLKPHA_SAMPLELEADING, \n<br>\n&nbsp;&nbsp;<a href=\"#gga9308807377a9f1b25c19bc60d9f64674a8084853059cd3bfd2fb020299d3da687\" class=\"el\">usartClockMode1<\/a> = USART_CTRL_CLKPOL_IDLELOW | USART_CTRL_CLKPHA_SAMPLETRAILING, \n<br>\n&nbsp;&nbsp;<a href=\"#gga9308807377a9f1b25c19bc60d9f64674a18be11341f18d1785f850cb21bb46472\" class=\"el\">usartClockMode2<\/a> = USART_CTRL_CLKPOL_IDLEHIGH | USART_CTRL_CLKPHA_SAMPLELEADING, \n<br>\n&nbsp;&nbsp;<a href=\"#gga9308807377a9f1b25c19bc60d9f64674a18786d9a20333f941d97df4cc120c065\" class=\"el\">usartClockMode3<\/a> = USART_CTRL_CLKPOL_IDLEHIGH | USART_CTRL_CLKPHA_SAMPLETRAILING\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Clock polarity/phase mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga4622379ccdcc531ab7f9e7e1cefe404f\" class=\"el\">USART_IrDAPw_Typedef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga4622379ccdcc531ab7f9e7e1cefe404fa097e8f5cccceea24436855d27fef393b\" class=\"el\">usartIrDAPwONE<\/a> = USART_IRCTRL_IRPW_ONE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga4622379ccdcc531ab7f9e7e1cefe404fac9490d2c769e384a76cc20a899eae81c\" class=\"el\">usartIrDAPwTWO<\/a> = USART_IRCTRL_IRPW_TWO, \n<br>\n&nbsp;&nbsp;<a href=\"#gga4622379ccdcc531ab7f9e7e1cefe404fa6af98696ba6fa19437ee62aeff9c3f2c\" class=\"el\">usartIrDAPwTHREE<\/a> = USART_IRCTRL_IRPW_THREE, \n<br>\n&nbsp;&nbsp;<a href=\"#gga4622379ccdcc531ab7f9e7e1cefe404fa75e466f4707b6e2f01034a580819f169\" class=\"el\">usartIrDAPwFOUR<\/a> = USART_IRCTRL_IRPW_FOUR\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Pulse width selection for IrDA mode.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab8a8e724d03a6cdaebc8f5c61a5e3e87\" class=\"el\">USART_I2sFormat_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a885574e8bb0ebc4f19e722a01e8e9c19\" class=\"el\">usartI2sFormatW32D32<\/a> = USART_I2SCTRL_FORMAT_W32D32, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87afd35bd8625dfaacfaae662096ded9d8b\" class=\"el\">usartI2sFormatW32D24M<\/a> = USART_I2SCTRL_FORMAT_W32D24M, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a379eb9eb76e596c450dc9e1cd1b0e35b\" class=\"el\">usartI2sFormatW32D24<\/a> = USART_I2SCTRL_FORMAT_W32D24, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a234782db65ab8a8e95d7bc85930849ae\" class=\"el\">usartI2sFormatW32D16<\/a> = USART_I2SCTRL_FORMAT_W32D16, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a8e390f7546aabde96d3d0381ead96a7c\" class=\"el\">usartI2sFormatW32D8<\/a> = USART_I2SCTRL_FORMAT_W32D8, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a598f4a0908698acf12a6c865119e1dac\" class=\"el\">usartI2sFormatW16D16<\/a> = USART_I2SCTRL_FORMAT_W16D16, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a34b640529c603f7ceb104a1f84acff1c\" class=\"el\">usartI2sFormatW16D8<\/a> = USART_I2SCTRL_FORMAT_W16D8, \n<br>\n&nbsp;&nbsp;<a href=\"#ggab8a8e724d03a6cdaebc8f5c61a5e3e87a0ea5b61e0848f94e31ab651128fa6055\" class=\"el\">usartI2sFormatW8D8<\/a> = USART_I2SCTRL_FORMAT_W8D8\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">I2S format selection.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">enum &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga3ddf14445cc284b6b54f07fbbd34c9ba\" class=\"el\">USART_I2sJustify_TypeDef<\/a> { <br>\n&nbsp;&nbsp;<a href=\"#gga3ddf14445cc284b6b54f07fbbd34c9baa38c6d77a15a0dbd19781744db0d94866\" class=\"el\">usartI2sJustifyLeft<\/a> = USART_I2SCTRL_JUSTIFY_LEFT, \n<br>\n&nbsp;&nbsp;<a href=\"#gga3ddf14445cc284b6b54f07fbbd34c9baa724e3b72fbdb569541b24acad86a5b93\" class=\"el\">usartI2sJustifyRight<\/a> = USART_I2SCTRL_JUSTIFY_RIGHT\n<br>\n }<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">I2S frame data justify.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table>\n<h2 class=\"groupheader\">Function Documentation<\/h2>\n<a id=\"ga373a66831daf2d2fe59c04b327e0c9a1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga373a66831daf2d2fe59c04b327e0c9a1\">◆&nbsp;<\/a><\/span>USART_BaudrateAsyncSet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_BaudrateAsyncSet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>refFreq, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>baudrate, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>ovs&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Configure USART/UART operating in asynchronous mode to use a given baudrate (or as close as possible to a specified baudrate). <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>refFreq<\/code><\/td><td>USART/UART reference clock frequency in Hz. If set to 0, the currently configured reference clock is assumed.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>baudrate<\/code><\/td><td>Baudrate to try to achieve for USART/UART.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>ovs<\/code><\/td><td>Oversampling to be used. Normal is 16x oversampling but lower oversampling may be used to achieve higher rates or better baudrate accuracy in some cases. Notice that lower oversampling frequency makes the channel more vulnerable to bit faults during reception due to clock inaccuracies compared to the link partner. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac3af64b304f10a2ea679526f8fe3a9fb\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac3af64b304f10a2ea679526f8fe3a9fb\">◆&nbsp;<\/a><\/span>USART_BaudrateCalc()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_BaudrateCalc <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>refFreq, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>clkdiv, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">bool&nbsp;<\/td>\n          <td class=\"paramname\"><code>syncmode, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>ovs&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Calculate baudrate for USART/UART given reference frequency, clock division, and oversampling rate (if async mode). <\/p>\n<p>This function returns the baudrate that a USART/UART module will use if configured with the given frequency, clock divisor, and mode. Notice that this function will not use the hardware configuration. It can be used to determine if a given configuration is sufficiently accurate for the application.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>refFreq<\/code><\/td><td>USART/UART HF peripheral frequency used.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>clkdiv<\/code><\/td><td>A clock division factor to be used.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>syncmode<\/code><\/td><td><ul>\n<li>True - synchronous mode operation. <\/li>\n<li>False - asynchronous mode operation.<\/li>\n<\/ul>\n<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>ovs<\/code><\/td><td>Oversampling used if in asynchronous mode. Not used if <code>syncmode<\/code> is true.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Baudrate with given settings. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga9f78987c84c2023fe907867833cdfab4\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9f78987c84c2023fe907867833cdfab4\">◆&nbsp;<\/a><\/span>USART_BaudrateGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_BaudrateGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get the current baudrate for USART/UART. <\/p>\n<p>This function returns the actual baudrate (not considering oscillator inaccuracies) used by a USART/UART peripheral.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>The current baudrate. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga5b96146f7c05f78d31bd77aacd4a3b5f\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga5b96146f7c05f78d31bd77aacd4a3b5f\">◆&nbsp;<\/a><\/span>USART_BaudrateSyncSet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_BaudrateSyncSet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>refFreq, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>baudrate&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Configure the USART operating in synchronous mode to use a given baudrate (or as close as possible to a specified baudrate). <\/p>\n<p>The configuration will be set to use a baudrate &lt;= the specified baudrate to ensure that the baudrate does not exceed the specified value.<\/p>\n<p>The fractional clock division is suppressed, although the hardware design allows it. It could cause half clock cycles to exceed a specified limit and thus potentially violate specifications for the slave device. In some special situations, a fractional clock division may be useful even in synchronous mode, but in those cases it must be directly adjusted, possibly assisted by <a href=\"#gac3af64b304f10a2ea679526f8fe3a9fb\" class=\"el\" title=\"Calculate baudrate for USART/UART given reference frequency, clock division, and oversampling rate (i...\">USART_BaudrateCalc()<\/a>:<\/p>\n<dl class=\"section warning\"><dt>Warning<\/dt><dd>The consequence of the aforementioned suppression of the fractional part of the clock divider is that some frequencies won't be achievable. The divider will only be able to be an integer value so the reference clock will only be dividable by N (where N is a positive integer).<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART peripheral register block. (Cannot be used on UART modules.)<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>refFreq<\/code><\/td><td>A USART reference clock frequency in Hz that will be used. If set to 0, the currently-configured reference clock is assumed.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>baudrate<\/code><\/td><td>Baudrate to try to achieve for USART. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf593db61ee6acd852dd9dc01d79a3548\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf593db61ee6acd852dd9dc01d79a3548\">◆&nbsp;<\/a><\/span>USART_Enable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_Enable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gab911b3b57b0cfe33cc34e7c37693c14b\" class=\"el\">USART_Enable_TypeDef<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>enable&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable/disable USART/UART receiver and/or transmitter. <\/p>\n<p>Notice that this function does not do any configuration. Enabling should normally be done after initialization (if not enabled as part of initialization).<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>enable<\/code><\/td><td>Select the status for the receiver/transmitter. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga5b851444f0fbdca97017c7b927b37f52\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga5b851444f0fbdca97017c7b927b37f52\">◆&nbsp;<\/a><\/span>USART_InitAsync()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_InitAsync <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-async-type-def\" class=\"el\" target=\"_blank\">USART_InitAsync_TypeDef<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize USART/UART for normal asynchronous mode. <\/p>\n<p>This function will configure basic settings to operate in normal asynchronous mode.<\/p>\n<p>A special control setup not covered by this function must be done after using this function by direct modification of the CTRL register.<\/p>\n<p>Notice that pins used by the USART/UART module must be properly configured by the user explicitly for the USART/UART to work as intended. (When configuring pins, remember to consider the sequence of configuration to avoid unintended pulses/glitches on output pins.)<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure used to configure the basic async setup. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaab6053ba081f6fabce6762fb4563fb28\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaab6053ba081f6fabce6762fb4563fb28\">◆&nbsp;<\/a><\/span>USART_InitSync()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_InitSync <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-sync-type-def\" class=\"el\" target=\"_blank\">USART_InitSync_TypeDef<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize USART for synchronous mode. <\/p>\n<p>This function will configure basic settings to operate in synchronous mode.<\/p>\n<p>A special control setup not covered by this function must be done after using this function by direct modification of the CTRL register.<\/p>\n<p>Notice that pins used by the USART module must be properly configured by the user explicitly for the USART to work as intended. (When configuring pins remember to consider the sequence of configuration to avoid unintended pulses/glitches on output pins.)<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART peripheral register block. (UART does not support this mode.)<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure used to configure basic async setup. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaefd1e61b7282c062406cc5b4eb0e8e98\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaefd1e61b7282c062406cc5b4eb0e8e98\">◆&nbsp;<\/a><\/span>USARTn_InitIrDA()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USARTn_InitIrDA <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-ir-d-a-type-def\" class=\"el\" target=\"_blank\">USART_InitIrDA_TypeDef<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize USART for asynchronous IrDA mode. <\/p>\n<p>This function will configure basic settings to operate in asynchronous IrDA mode.<\/p>\n<p>A special control setup not covered by this function must be done after using this function by direct modification of the CTRL and IRCTRL registers.<\/p>\n<p>Notice that pins used by the USART/UART module must be properly configured by the user explicitly for the USART/UART to work as intended. (When configuring pins, remember to consider the sequence of configuration to avoid unintended pulses/glitches on output pins.)<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure used to configure async IrDA setup.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Not all USART instances support IrDA. See the data sheet for your device. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaa3973304191a67c1b6e837d8b6cc2197\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaa3973304191a67c1b6e837d8b6cc2197\">◆&nbsp;<\/a><\/span>USART_InitI2s()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_InitI2s <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-init-i2s-type-def\" class=\"el\" target=\"_blank\">USART_InitI2s_TypeDef<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize USART for I2S mode. <\/p>\n<p>This function will configure basic settings to operate in I2S mode.<\/p>\n<p>A special control setup not covered by this function must be done after using this function by direct modification of the CTRL and I2SCTRL registers.<\/p>\n<p>Notice that pins used by the USART module must be properly configured by the user explicitly for the USART to work as intended. (When configuring pins, remember to consider the sequence of configuration to avoid unintended pulses/glitches on output pins.)<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART peripheral register block. (UART does not support this mode.)<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure used to configure the basic I2S setup.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function does not apply to all USART's. See the chip Reference Manual. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga0deb307dc635809644280bd95dca6301\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0deb307dc635809644280bd95dca6301\">◆&nbsp;<\/a><\/span>USART_InitPrsTrigger()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_InitPrsTrigger <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const <a href=\"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/struct-u-s-a-r-t-prs-trigger-init-type-def\" class=\"el\" target=\"_blank\">USART_PrsTriggerInit_TypeDef<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>init&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initialize the automatic transmissions using PRS channel as a trigger. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Initialize USART with USART_Init() before setting up the PRS configuration.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to USART to configure.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>init<\/code><\/td><td>A pointer to the initialization structure. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga4769e1b5d573d6cecc95ca0c7d8e2da2\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga4769e1b5d573d6cecc95ca0c7d8e2da2\">◆&nbsp;<\/a><\/span>USART_Reset()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_Reset <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Reset USART/UART to the same state that it was in after a hardware reset. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to USART/UART peripheral register block. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga85160dfc5405a7fd0f35948fc45450df\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga85160dfc5405a7fd0f35948fc45450df\">◆&nbsp;<\/a><\/span>USART_Rx()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint8_t USART_Rx <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 4-8 bit frame, (or part of 10-16 bit frame). <\/p>\n<p>This function is normally used to receive one frame when operating with frame length 4-8 bits. See <a href=\"#ga93710bf6c5a6c6eff97644bc40ba80c6\" class=\"el\">USART_RxExt()<\/a> for reception of 9 bit frames.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is empty until data is received. Alternatively, the user can explicitly check whether data is available. If data is available, call <a href=\"#gaecc76b15ac6395ea6e5d164bc5ac5d1c\" class=\"el\">USART_RxDataGet()<\/a> to read the RXDATA register directly.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gab9ce412ba8931aa7087b2f3e79b9f315\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab9ce412ba8931aa7087b2f3e79b9f315\">◆&nbsp;<\/a><\/span>USART_RxDouble()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t USART_RxDouble <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive two 4-8 bit frames or one 10-16 bit frame. <\/p>\n<p>This function is normally used to receive one frame when operating with frame length 10-16 bits. See <a href=\"#gac7f32fb42fbf27b2f8c0fbcc86b54813\" class=\"el\">USART_RxDoubleExt()<\/a> for reception of two 9 bit frames.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is empty until data is received. Alternatively, the user can explicitly check whether data is available. If data is available, call <a href=\"#ga9bcf0da96c9099b4b3d6b545e792ead5\" class=\"el\">USART_RxDoubleGet()<\/a> to read the RXDOUBLE register directly.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac7f32fb42fbf27b2f8c0fbcc86b54813\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac7f32fb42fbf27b2f8c0fbcc86b54813\">◆&nbsp;<\/a><\/span>USART_RxDoubleExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_RxDoubleExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive two 4-9 bit frames, or one 10-16 bit frame with extended information. <\/p>\n<p>This function is normally used to receive one frame when operating with frame length 10-16 bits and additional RX status information is required.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if buffer is empty until data is received. Alternatively, the user can explicitly check whether data is available. If data is available, call <a href=\"#ga7b05f0ea94b3df231c31118872619a4c\" class=\"el\">USART_RxDoubleXGet()<\/a> to read the RXDOUBLEX register directly.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga93710bf6c5a6c6eff97644bc40ba80c6\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga93710bf6c5a6c6eff97644bc40ba80c6\">◆&nbsp;<\/a><\/span>USART_RxExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t USART_RxExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 4-9 bit frame (or part of 10-16 bit frame) with extended information. <\/p>\n<p>This function is normally used to receive one frame when operating with frame length 4-9 bits and additional RX status information is required.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is empty until data is received. Alternatively, the user can explicitly check whether data is available. If data is available, call <a href=\"#ga87a26373115903e9e6866d769f64e790\" class=\"el\">USART_RxDataXGet()<\/a> to read the RXDATAX register directly.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gad1ce52fc0a8a5a618fffd614b086c46c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gad1ce52fc0a8a5a618fffd614b086c46c\">◆&nbsp;<\/a><\/span>USART_SpiTransfer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint8_t USART_SpiTransfer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Perform one 8 bit frame SPI transfer. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the transmit buffer is full. When a transmit buffer becomes available, data is written and the function will wait until data is fully transmitted. The SPI return value is then read out and returned.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gabdac7c0c6cc0b6aa998bf8d688f46591\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gabdac7c0c6cc0b6aa998bf8d688f46591\">◆&nbsp;<\/a><\/span>USART_Tx()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_Tx <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit one 4-9 bit frame. <\/p>\n<p>Depending on the frame length configuration, 4-8 (least significant) bits from <code>data<\/code> are transmitted. If the frame length is 9, 8 bits are transmitted from <code>data<\/code> and one bit as specified by CTRL register, BIT8DV field. See <a href=\"#ga8ff633e12b44c4032366a859d07f9766\" class=\"el\" title=\"Transmit one 4-9 bit frame with extended control.\">USART_TxExt()<\/a> for transmitting 9 bit frame with full control of all 9 bits.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit. See details above for more information. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gabeab88ec2b2fd0fee0b1b42f8aa4f69b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gabeab88ec2b2fd0fee0b1b42f8aa4f69b\">◆&nbsp;<\/a><\/span>USART_TxDouble()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_TxDouble <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit two 4-9 bit frames or one 10-16 bit frame. <\/p>\n<p>Depending on the frame length configuration, 4-8 (least significant) bits from each byte in <code>data<\/code> are transmitted. If frame length is 9, 8 bits are transmitted from each byte in <code>data<\/code> adding one bit as specified by the CTRL register, BIT8DV field, to each byte. See <a href=\"#ga3a032f4772d7f52a50bc497b15bcd41b\" class=\"el\" title=\"Transmit two 4-9 bit frames or one 10-16 bit frame with extended control.\">USART_TxDoubleExt()<\/a> for transmitting two 9 bit frames with full control of all 9 bits.<\/p>\n<p>If the frame length is 10-16, 10-16 (least significant) bits from <code>data<\/code> are transmitted.<\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit, the least significant byte holds the frame transmitted first. See details above for more info. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga3a032f4772d7f52a50bc497b15bcd41b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3a032f4772d7f52a50bc497b15bcd41b\">◆&nbsp;<\/a><\/span>USART_TxDoubleExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_TxDoubleExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit two 4-9 bit frames or one 10-16 bit frame with extended control. <\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit with extended control. Contains two 16 bit words concatenated. Least significant word holds the frame transmitted first. If the frame length is 4-9, two frames with 4-9 least significant bits from each 16 bit word are transmitted. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section user\"><dt><\/dt><dd>If the frame length is 10-16 bits, 8 data bits are taken from the least significant 16 bit word and the remaining bits from the other 16 bit word. <\/dd><\/dl>\n<dl class=\"section user\"><dt><\/dt><dd>Additional control bits are available as documented in the reference manual (set to 0 if not used). For 10-16 bit frame length, these control bits are taken from the most significant 16 bit word. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga8ff633e12b44c4032366a859d07f9766\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga8ff633e12b44c4032366a859d07f9766\">◆&nbsp;<\/a><\/span>USART_TxExt()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_TxExt <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>data&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Transmit one 4-9 bit frame with extended control. <\/p>\n<p>Notice that possible parity/stop bits in asynchronous mode are not considered part of a specified frame bit length.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function will stall if the buffer is full until the buffer becomes available.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>A pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>data<\/code><\/td><td>Data to transmit with extended control. Least significant bit contains frame bits. Additional control bits are available as documented in the reference manual (set to 0 if not used). <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga48f14b997f4fc24fcdcce6f2c04b2cba\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga48f14b997f4fc24fcdcce6f2c04b2cba\">◆&nbsp;<\/a><\/span>USART_IntClear()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_IntClear <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Clear one or more pending USART interrupts. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>Pending USART/UART interrupt source(s) to clear. Use one or more valid interrupt flags for the USART module (USART_IF_nnn) OR'ed together. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga4fd00651a4209fa9bd9bf181a4ff9eea\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga4fd00651a4209fa9bd9bf181a4ff9eea\">◆&nbsp;<\/a><\/span>USART_IntDisable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_IntDisable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Disable one or more USART interrupts. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>USART/UART interrupt source(s) to disable. Use one or more valid interrupt flags for the USART module (USART_IF_nnn) OR'ed together. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga45215f22f4c0b4c27f2a94315acd58e7\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga45215f22f4c0b4c27f2a94315acd58e7\">◆&nbsp;<\/a><\/span>USART_IntEnable()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_IntEnable <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable one or more USART interrupts. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Depending on the use, a pending interrupt may already be set prior to enabling the interrupt. To ignore a pending interrupt, consider using <a href=\"#ga48f14b997f4fc24fcdcce6f2c04b2cba\" class=\"el\" title=\"Clear one or more pending USART interrupts.\">USART_IntClear()<\/a> prior to enabling the interrupt.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>USART/UART interrupt source(s) to enable. Use one or more valid interrupt flags for the USART module (USART_IF_nnn) OR'ed together. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga34bad697ee9793eb89b57a380b4d0f8c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga34bad697ee9793eb89b57a380b4d0f8c\">◆&nbsp;<\/a><\/span>USART_IntGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_IntGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get pending USART interrupt flags. <\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The event bits are not cleared by the use of this function.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>USART/UART interrupt source(s) pending. Returns one or more valid interrupt flags for the USART module (USART_IF_nnn) OR'ed together. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga3f0626056b94a9a2994b8108129676d8\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3f0626056b94a9a2994b8108129676d8\">◆&nbsp;<\/a><\/span>USART_IntGetEnabled()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_IntGetEnabled <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get enabled and pending USART interrupt flags. <\/p>\n<p>Useful for handling more interrupt sources in the same interrupt handler.<\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Interrupt flags are not cleared by the use of this function.<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Pending and enabled USART interrupt sources. The return value is the bitwise AND combination of<ul>\n<li>the OR combination of enabled interrupt sources in USARTx_IEN_nnn register (USARTx_IEN_nnn) and<\/li>\n<li>the OR combination of valid interrupt flags of the USART module (USARTx_IF_nnn). <\/li>\n<\/ul>\n<\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga1c5e9331c28d01b0535cf98fc67b4b10\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga1c5e9331c28d01b0535cf98fc67b4b10\">◆&nbsp;<\/a><\/span>USART_IntSet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void USART_IntSet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Set one or more pending USART interrupts from SW. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n    <tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>flags<\/code><\/td><td>USART/UART interrupt source(s) to set to pending. Use one or more valid interrupt flags for the USART module (USART_IF_nnn) OR'ed together. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf4092654653063bb2b73da85cc7b3f2b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf4092654653063bb2b73da85cc7b3f2b\">◆&nbsp;<\/a><\/span>USART_StatusGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_StatusGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get USART STATUS register. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to the USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>STATUS register value. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaecc76b15ac6395ea6e5d164bc5ac5d1c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaecc76b15ac6395ea6e5d164bc5ac5d1c\">◆&nbsp;<\/a><\/span>USART_RxDataGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint8_t USART_RxDataGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 4-8 bit frame, (or part of 10-16 bit frame). <\/p>\n<p>This function is used to quickly receive one 4-8 bits frame by reading the RXDATA register directly, without checking the STATUS register for the RXDATAV flag. This can be useful from the RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read the received data. Please refer to <a href=\"#ga87a26373115903e9e6866d769f64e790\" class=\"el\">USART_RxDataXGet()<\/a> for reception of 9 bit frames.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Because this function does not check whether the RXDATA register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#ga85160dfc5405a7fd0f35948fc45450df\" class=\"el\">USART_Rx()<\/a> is normally a better choice if the validity of the RXDATA register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits in asynchronous mode are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga9bcf0da96c9099b4b3d6b545e792ead5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9bcf0da96c9099b4b3d6b545e792ead5\">◆&nbsp;<\/a><\/span>USART_RxDoubleGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t USART_RxDoubleGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive two 4-8 bit frames, or one 10-16 bit frame. <\/p>\n<p>This function is used to quickly receive one 10-16 bits frame or two 4-8 bit frames by reading the RXDOUBLE register directly, without checking the STATUS register for the RXDATAV flag. This can be useful from the RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read the received data. This function is normally used to receive one frame when operating with frame length 10-16 bits. Please refer to <a href=\"#ga7b05f0ea94b3df231c31118872619a4c\" class=\"el\">USART_RxDoubleXGet()<\/a> for reception of two 9 bit frames.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Because this function does not check whether the RXDOUBLE register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#gab9ce412ba8931aa7087b2f3e79b9f315\" class=\"el\">USART_RxDouble()<\/a> is normally a better choice if the validity of the RXDOUBLE register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits in asynchronous mode are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga7b05f0ea94b3df231c31118872619a4c\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7b05f0ea94b3df231c31118872619a4c\">◆&nbsp;<\/a><\/span>USART_RxDoubleXGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t USART_RxDoubleXGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive two 4-9 bit frames, or one 10-16 bit frame with extended information. <\/p>\n<p>This function is used to quickly receive one 10-16 bits frame or two 4-9 bit frames by reading the RXDOUBLEX register directly, without checking the STATUS register for the RXDATAV flag. This can be useful from the RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read the received data.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Because this function does not check whether the RXDOUBLEX register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#gac7f32fb42fbf27b2f8c0fbcc86b54813\" class=\"el\">USART_RxDoubleExt()<\/a> is normally a better choice if the validity of the RXDOUBLEX register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits in asynchronous mode are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga87a26373115903e9e6866d769f64e790\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga87a26373115903e9e6866d769f64e790\">◆&nbsp;<\/a><\/span>USART_RxDataXGet()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint16_t USART_RxDataXGet <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">USART_TypeDef *&nbsp;<\/td>\n          <td class=\"paramname\"><code>usart<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Receive one 4-9 bit frame, (or part of 10-16 bit frame) with extended information. <\/p>\n<p>This function is used to quickly receive one 4-9 bit frame, (or part of 10-16 bit frame) with extended information by reading the RXDATAX register directly, without checking the STATUS register for the RXDATAV flag. This can be useful from the RXDATAV interrupt handler, i.e., waiting is superfluous, in order to quickly read the received data.<\/p>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Because this function does not check whether the RXDATAX register actually holds valid data, it should only be used in situations when it is certain that there is valid data, ensured by some external program routine, e.g., when handling an RXDATAV interrupt. The <a href=\"#ga93710bf6c5a6c6eff97644bc40ba80c6\" class=\"el\">USART_RxExt()<\/a> is normally a better choice if the validity of the RXDATAX register is not certain.<\/dd>\n<dd>\nNotice that possible parity/stop bits in asynchronous mode are not considered part of specified frame bit length.<\/dd><\/dl>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramdir\">[in]<\/td><td class=\"paramname\"><code>usart<\/code><\/td><td>Pointer to USART/UART peripheral register block.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Data received. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Macro Definition Documentation<\/h2>\n<a id=\"gadc8f891a4bd89e12d447801bad5ba108\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gadc8f891a4bd89e12d447801bad5ba108\">◆&nbsp;<\/a><\/span>USART_INITASYNC_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define USART_INITASYNC_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                                                                \\<\/div>\n<div class=\"line\">    usartEnable,           <span class=\"comment\">/* Enable RX/TX when initialization is complete. */<\/span>                     \\<\/div>\n<div class=\"line\">    0,                     <span class=\"comment\">/* Use current configured reference clock for configuring baud rate. */<\/span> \\<\/div>\n<div class=\"line\">    115200,                <span class=\"comment\">/* 115200 bits/s. */<\/span>                                                    \\<\/div>\n<div class=\"line\">    usartOVS16,            <span class=\"comment\">/* 16x oversampling. */<\/span>                                                 \\<\/div>\n<div class=\"line\">    usartDatabits8,        <span class=\"comment\">/* 8 data bits. */<\/span>                                                      \\<\/div>\n<div class=\"line\">    usartNoParity,         <span class=\"comment\">/* No parity. */<\/span>                                                        \\<\/div>\n<div class=\"line\">    usartStopbits1,        <span class=\"comment\">/* 1 stop bit. */<\/span>                                                       \\<\/div>\n<div class=\"line\">    false,                 <span class=\"comment\">/* Do not disable majority vote. */<\/span>                                     \\<\/div>\n<div class=\"line\">    false,                 <span class=\"comment\">/* Not USART PRS input mode. */<\/span>                                         \\<\/div>\n<div class=\"line\">    0,                     <span class=\"comment\">/* PRS channel 0. */<\/span>                                                    \\<\/div>\n<div class=\"line\">    false,                 <span class=\"comment\">/* Auto CS functionality enable/disable switch */<\/span>                       \\<\/div>\n<div class=\"line\">    false,                 <span class=\"comment\">/* No CS invert. */<\/span>                                                     \\<\/div>\n<div class=\"line\">    0,                     <span class=\"comment\">/* Auto CS Hold cycles. */<\/span>                                              \\<\/div>\n<div class=\"line\">    0,                     <span class=\"comment\">/* Auto CS Setup cycles. */<\/span>                                             \\<\/div>\n<div class=\"line\">    usartHwFlowControlNone <span class=\"comment\">/* No HW flow control. */<\/span>                                               \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for USART asynchronous initialization structure. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"ga8a1b203a68a8c787938fd30cd3ac6935\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga8a1b203a68a8c787938fd30cd3ac6935\">◆&nbsp;<\/a><\/span>USART_INITPRSTRIGGER_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define USART_INITPRSTRIGGER_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                             \\<\/div>\n<div class=\"line\">    false,             <span class=\"comment\">/* Do not enable autoTX triggering. */<\/span>   \\<\/div>\n<div class=\"line\">    false,             <span class=\"comment\">/* Do not enable receive triggering. */<\/span>  \\<\/div>\n<div class=\"line\">    false,             <span class=\"comment\">/* Do not enable transmit triggering. */<\/span> \\<\/div>\n<div class=\"line\">    0                  <span class=\"comment\">/* Set default channel to zero. */<\/span>       \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for USART PRS triggering structure. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"gaaf3d1a75faf77eca583c62339c005712\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaaf3d1a75faf77eca583c62339c005712\">◆&nbsp;<\/a><\/span>USART_INITSYNC_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define USART_INITSYNC_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                                                          \\<\/div>\n<div class=\"line\">    usartEnable,     <span class=\"comment\">/* Enable RX/TX when initialization is complete. */<\/span>                     \\<\/div>\n<div class=\"line\">    0,               <span class=\"comment\">/* Use current configured reference clock for configuring baud rate. */<\/span> \\<\/div>\n<div class=\"line\">    1000000,         <span class=\"comment\">/* 1 Mbits/s. */<\/span>                                                        \\<\/div>\n<div class=\"line\">    usartDatabits8,  <span class=\"comment\">/* 8 databits. */<\/span>                                                       \\<\/div>\n<div class=\"line\">    true,            <span class=\"comment\">/* Master mode. */<\/span>                                                      \\<\/div>\n<div class=\"line\">    false,           <span class=\"comment\">/* Send least significant bit first. */<\/span>                                 \\<\/div>\n<div class=\"line\">    usartClockMode0, <span class=\"comment\">/* Clock idle low, sample on rising edge. */<\/span>                            \\<\/div>\n<div class=\"line\">    false,           <span class=\"comment\">/* Not USART PRS input mode. */<\/span>                                         \\<\/div>\n<div class=\"line\">    0,               <span class=\"comment\">/* PRS channel 0. */<\/span>                                                    \\<\/div>\n<div class=\"line\">    false,           <span class=\"comment\">/* No AUTOTX mode. */<\/span>                                                   \\<\/div>\n<div class=\"line\">    false,           <span class=\"comment\">/* No AUTOCS mode. */<\/span>                                                   \\<\/div>\n<div class=\"line\">    false,           <span class=\"comment\">/* No CS invert. */<\/span>                                                     \\<\/div>\n<div class=\"line\">    0,               <span class=\"comment\">/* Auto CS Hold cycles. */<\/span>                                              \\<\/div>\n<div class=\"line\">    0                <span class=\"comment\">/* Auto CS Setup cycles. */<\/span>                                             \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for USART sync initialization structure. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"ga7e493420d94db772e10afe78524af68e\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7e493420d94db772e10afe78524af68e\">◆&nbsp;<\/a><\/span>USART_INITIRDA_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define USART_INITIRDA_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                                                                  \\<\/div>\n<div class=\"line\">    {                                                                                                \\<\/div>\n<div class=\"line\">      usartEnable,           <span class=\"comment\">/* Enable RX/TX when initialization is complete. */<\/span>                     \\<\/div>\n<div class=\"line\">      0,                     <span class=\"comment\">/* Use current configured reference clock for configuring baud rate. */<\/span> \\<\/div>\n<div class=\"line\">      115200,                <span class=\"comment\">/* 115200 bits/s. */<\/span>                                                    \\<\/div>\n<div class=\"line\">      usartOVS16,            <span class=\"comment\">/* 16x oversampling. */<\/span>                                                 \\<\/div>\n<div class=\"line\">      usartDatabits8,        <span class=\"comment\">/* 8 data bits. */<\/span>                                                      \\<\/div>\n<div class=\"line\">      usartEvenParity,       <span class=\"comment\">/* Even parity. */<\/span>                                                      \\<\/div>\n<div class=\"line\">      usartStopbits1,        <span class=\"comment\">/* 1 stop bit. */<\/span>                                                       \\<\/div>\n<div class=\"line\">      false,                 <span class=\"comment\">/* Do not disable majority vote. */<\/span>                                     \\<\/div>\n<div class=\"line\">      false,                 <span class=\"comment\">/* Not USART PRS input mode. */<\/span>                                         \\<\/div>\n<div class=\"line\">      0,                     <span class=\"comment\">/* PRS channel 0. */<\/span>                                                    \\<\/div>\n<div class=\"line\">      false,                 <span class=\"comment\">/* Auto CS functionality enable/disable switch */<\/span>                       \\<\/div>\n<div class=\"line\">      false,                 <span class=\"comment\">/* No CS invert. */<\/span>                                                     \\<\/div>\n<div class=\"line\">      0,                     <span class=\"comment\">/* Auto CS Hold cycles */<\/span>                                               \\<\/div>\n<div class=\"line\">      0,                     <span class=\"comment\">/* Auto CS Setup cycles */<\/span>                                              \\<\/div>\n<div class=\"line\">      usartHwFlowControlNone <span class=\"comment\">/* No HW flow control */<\/span>                                                \\<\/div>\n<div class=\"line\">    },                                                                                               \\<\/div>\n<div class=\"line\">    false,            <span class=\"comment\">/* Rx invert disabled. */<\/span>                                                      \\<\/div>\n<div class=\"line\">    false,            <span class=\"comment\">/* Filtering disabled. */<\/span>                                                      \\<\/div>\n<div class=\"line\">    usartIrDAPwTHREE  <span class=\"comment\">/* Pulse width is set to ONE. */<\/span>                                               \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for IrDA mode initialization structure. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"ga1bdea4295e7eb51c4f3ef40ec5af006f\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga1bdea4295e7eb51c4f3ef40ec5af006f\">◆&nbsp;<\/a><\/span>USART_INITI2S_DEFAULT<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">#define USART_INITI2S_DEFAULT<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n<b>Value:<\/b><div class=\"fragment\"><div class=\"line\">  {                                                                                            \\<\/div>\n<div class=\"line\">    {                                                                                          \\<\/div>\n<div class=\"line\">      usartEnableTx,    <span class=\"comment\">/* Enable TX when init completed. */<\/span>                                   \\<\/div>\n<div class=\"line\">      0,                <span class=\"comment\">/* Use current configured reference clock for configuring baudrate. */<\/span> \\<\/div>\n<div class=\"line\">      1000000,          <span class=\"comment\">/* Baudrate 1M bits/s. */<\/span>                                              \\<\/div>\n<div class=\"line\">      usartDatabits16,  <span class=\"comment\">/* 16 databits. */<\/span>                                                     \\<\/div>\n<div class=\"line\">      true,             <span class=\"comment\">/* Operate as I2S master. */<\/span>                                           \\<\/div>\n<div class=\"line\">      true,             <span class=\"comment\">/* Most significant bit first. */<\/span>                                      \\<\/div>\n<div class=\"line\">      usartClockMode0,  <span class=\"comment\">/* Clock idle low, sample on rising edge. */<\/span>                           \\<\/div>\n<div class=\"line\">      false,            <span class=\"comment\">/* Don't enable USARTRx via PRS. */<\/span>                                    \\<\/div>\n<div class=\"line\">      usartPrsRxCh0,    <span class=\"comment\">/* PRS channel selection (dummy). */<\/span>                                   \\<\/div>\n<div class=\"line\">      false,            <span class=\"comment\">/* Disable AUTOTX mode. */<\/span>                                             \\<\/div>\n<div class=\"line\">      false,            <span class=\"comment\">/* No AUTOCS mode */<\/span>                                                   \\<\/div>\n<div class=\"line\">      false,            <span class=\"comment\">/* No CS invert. */<\/span>                                                    \\<\/div>\n<div class=\"line\">      0,                <span class=\"comment\">/* Auto CS Hold cycles */<\/span>                                              \\<\/div>\n<div class=\"line\">      0                 <span class=\"comment\">/* Auto CS Setup cycles */<\/span>                                             \\<\/div>\n<div class=\"line\">    },                                                                                         \\<\/div>\n<div class=\"line\">    usartI2sFormatW16D16, <span class=\"comment\">/* 16-bit word, 16-bit data */<\/span>                                       \\<\/div>\n<div class=\"line\">    true,               <span class=\"comment\">/* Delay on I2S data. */<\/span>                                               \\<\/div>\n<div class=\"line\">    false,              <span class=\"comment\">/* No DMA split. */<\/span>                                                    \\<\/div>\n<div class=\"line\">    usartI2sJustifyLeft,<span class=\"comment\">/* Data is left-justified within the frame */<\/span>                          \\<\/div>\n<div class=\"line\">    false               <span class=\"comment\">/* Stereo mode. */<\/span>                                                     \\<\/div>\n<div class=\"line\">  }<\/div>\n<\/div><!-- fragment -->\n<p>Default configuration for I2S mode initialization structure. <\/p>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Typedef Documentation<\/h2>\n<a id=\"ga284a3fe4892ec7fa45af23127937121b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga284a3fe4892ec7fa45af23127937121b\">◆&nbsp;<\/a><\/span>USART_PRS_Channel_t<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">typedef uint8_t <a href=\"#ga284a3fe4892ec7fa45af23127937121b\" class=\"el\">USART_PRS_Channel_t<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>PRS Channel type. <\/p>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Enumeration Type Documentation<\/h2>\n<a id=\"ga882a4def49cdb2fb18622d61b24eeacd\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga882a4def49cdb2fb18622d61b24eeacd\">◆&nbsp;<\/a><\/span>USART_Databits_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga882a4def49cdb2fb18622d61b24eeacd\" class=\"el\">USART_Databits_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Databit selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacdadebca990738b5483158bf21c58e25062\"><\/a>usartDatabits4&nbsp;<\/td><td class=\"fielddoc\"><p>4 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacdad31e812dbed189d313987dd6716a293a\"><\/a>usartDatabits5&nbsp;<\/td><td class=\"fielddoc\"><p>5 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda75a5514c0ba5fc1459b6dcacd3d7a393\"><\/a>usartDatabits6&nbsp;<\/td><td class=\"fielddoc\"><p>6 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda39f012f6d3d52b40d8d3a56b247fce62\"><\/a>usartDatabits7&nbsp;<\/td><td class=\"fielddoc\"><p>7 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacdac41acc4a2e22f437bc449a70b6ce485b\"><\/a>usartDatabits8&nbsp;<\/td><td class=\"fielddoc\"><p>8 data bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda226752514b18d44ebe846cbbb71a8638\"><\/a>usartDatabits9&nbsp;<\/td><td class=\"fielddoc\"><p>9 data bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacdaec84cf074763661a58f25778dacd067a\"><\/a>usartDatabits10&nbsp;<\/td><td class=\"fielddoc\"><p>10 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda7f229fe002e5cb9e12c5df747ff159cd\"><\/a>usartDatabits11&nbsp;<\/td><td class=\"fielddoc\"><p>11 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda1d36841ce57623a820b2ca45c819cc39\"><\/a>usartDatabits12&nbsp;<\/td><td class=\"fielddoc\"><p>12 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda0f6364e103ec3b73c2e9016ec0d0b3b1\"><\/a>usartDatabits13&nbsp;<\/td><td class=\"fielddoc\"><p>13 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda3a2b1a633fd85f407e15f7d25860d2e8\"><\/a>usartDatabits14&nbsp;<\/td><td class=\"fielddoc\"><p>14 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacdaed811871858ca941c0fa6ed0a8f96d2a\"><\/a>usartDatabits15&nbsp;<\/td><td class=\"fielddoc\"><p>15 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga882a4def49cdb2fb18622d61b24eeacda93fce2f8cbf2bb29a967580db20e8734\"><\/a>usartDatabits16&nbsp;<\/td><td class=\"fielddoc\"><p>16 data bits (not available for UART). <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"gab911b3b57b0cfe33cc34e7c37693c14b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab911b3b57b0cfe33cc34e7c37693c14b\">◆&nbsp;<\/a><\/span>USART_Enable_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#gab911b3b57b0cfe33cc34e7c37693c14b\" class=\"el\">USART_Enable_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Enable selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"ggab911b3b57b0cfe33cc34e7c37693c14ba7d35b8fed019bb16bfc28f64152303fd\"><\/a>usartDisable&nbsp;<\/td><td class=\"fielddoc\"><p>Disable both receiver and transmitter. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab911b3b57b0cfe33cc34e7c37693c14baaf7b7b0cf882128213e8d5e5c61290b9\"><\/a>usartEnableRx&nbsp;<\/td><td class=\"fielddoc\"><p>Enable receiver only, transmitter disabled. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab911b3b57b0cfe33cc34e7c37693c14ba7ed050fc1c7868d3f6cbc877602aaed5\"><\/a>usartEnableTx&nbsp;<\/td><td class=\"fielddoc\"><p>Enable transmitter only, receiver disabled. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab911b3b57b0cfe33cc34e7c37693c14ba2abb81782e20df3531cab7e13a0cb9de\"><\/a>usartEnable&nbsp;<\/td><td class=\"fielddoc\"><p>Enable both receiver and transmitter. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"gab8f135534a77aba5382a820b2a35a284\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab8f135534a77aba5382a820b2a35a284\">◆&nbsp;<\/a><\/span>USART_OVS_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#gab8f135534a77aba5382a820b2a35a284\" class=\"el\">USART_OVS_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Oversampling selection, used for asynchronous operation. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"ggab8f135534a77aba5382a820b2a35a284a4edad78d0db280db3a3edede718b1bce\"><\/a>usartOVS16&nbsp;<\/td><td class=\"fielddoc\"><p>16x oversampling (normal). <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8f135534a77aba5382a820b2a35a284a2b885ba8c997e64c82c719cd46535036\"><\/a>usartOVS8&nbsp;<\/td><td class=\"fielddoc\"><p>8x oversampling. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8f135534a77aba5382a820b2a35a284acd17f36e920765b705f86c1726c28869\"><\/a>usartOVS6&nbsp;<\/td><td class=\"fielddoc\"><p>6x oversampling. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8f135534a77aba5382a820b2a35a284a49a8f2ea890378f69a6cbbc2915c7315\"><\/a>usartOVS4&nbsp;<\/td><td class=\"fielddoc\"><p>4x oversampling. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga57d987f474e5fd47d4760c4178c7f0d5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga57d987f474e5fd47d4760c4178c7f0d5\">◆&nbsp;<\/a><\/span>USART_Parity_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga57d987f474e5fd47d4760c4178c7f0d5\" class=\"el\">USART_Parity_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Parity selection, mainly used for asynchronous operation. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga57d987f474e5fd47d4760c4178c7f0d5a625e8e546c8d8f83b3b6ac814ace927a\"><\/a>usartNoParity&nbsp;<\/td><td class=\"fielddoc\"><p>No parity. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga57d987f474e5fd47d4760c4178c7f0d5a36c08e984707c54f735f4be7b3b656cc\"><\/a>usartEvenParity&nbsp;<\/td><td class=\"fielddoc\"><p>Even parity. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga57d987f474e5fd47d4760c4178c7f0d5a858c7e3ca4c38ad15f0330d64b29ba76\"><\/a>usartOddParity&nbsp;<\/td><td class=\"fielddoc\"><p>Odd parity. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga697bdb6e146a4f6b8e761efc4f31065e\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga697bdb6e146a4f6b8e761efc4f31065e\">◆&nbsp;<\/a><\/span>USART_Stopbits_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga697bdb6e146a4f6b8e761efc4f31065e\" class=\"el\">USART_Stopbits_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Stop bits selection, used for asynchronous operation. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga697bdb6e146a4f6b8e761efc4f31065ea52f2bbad2d75d01a5d87b7d99c4cf8bb\"><\/a>usartStopbits0p5&nbsp;<\/td><td class=\"fielddoc\"><p>0.5 stop bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga697bdb6e146a4f6b8e761efc4f31065ea41a16eb6b014abeef340c0b219dcb470\"><\/a>usartStopbits1&nbsp;<\/td><td class=\"fielddoc\"><p>1 stop bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga697bdb6e146a4f6b8e761efc4f31065ea3dff4354686ccd03c04dd950107bb371\"><\/a>usartStopbits1p5&nbsp;<\/td><td class=\"fielddoc\"><p>1.5 stop bits. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga697bdb6e146a4f6b8e761efc4f31065ea7b97131b5cebe4ca1b398baf6d3e1909\"><\/a>usartStopbits2&nbsp;<\/td><td class=\"fielddoc\"><p>2 stop bits. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga7a113149a13b20ef5781015cf44082e4\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7a113149a13b20ef5781015cf44082e4\">◆&nbsp;<\/a><\/span>USART_HwFlowControl_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga7a113149a13b20ef5781015cf44082e4\" class=\"el\">USART_HwFlowControl_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Hardware Flow Control Selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga7a113149a13b20ef5781015cf44082e4a89aaf3d44fffd6bb201b09a2a51f7ff1\"><\/a>usartHwFlowControlNone&nbsp;<\/td><td class=\"fielddoc\"><p>No hardware flow control. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga7a113149a13b20ef5781015cf44082e4afd332860f3bb02ad2a4b09a8b5fd676b\"><\/a>usartHwFlowControlCts&nbsp;<\/td><td class=\"fielddoc\"><p>CTS signal is enabled for TX flow control. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga7a113149a13b20ef5781015cf44082e4a8dbe2de67ddcba24f9ad69c035870301\"><\/a>usartHwFlowControlRts&nbsp;<\/td><td class=\"fielddoc\"><p>RTS signal is enabled for RX flow control. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga7a113149a13b20ef5781015cf44082e4ae2ef018b6e75d59758a69e19cdde882e\"><\/a>usartHwFlowControlCtsAndRts&nbsp;<\/td><td class=\"fielddoc\"><p>CTS and RTS signals are enabled for TX and RX flow control. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga9308807377a9f1b25c19bc60d9f64674\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9308807377a9f1b25c19bc60d9f64674\">◆&nbsp;<\/a><\/span>USART_ClockMode_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga9308807377a9f1b25c19bc60d9f64674\" class=\"el\">USART_ClockMode_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Clock polarity/phase mode. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga9308807377a9f1b25c19bc60d9f64674a46a93474ca796f5506715ad9f8c42708\"><\/a>usartClockMode0&nbsp;<\/td><td class=\"fielddoc\"><p>Clock idle low, sample on rising edge. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga9308807377a9f1b25c19bc60d9f64674a8084853059cd3bfd2fb020299d3da687\"><\/a>usartClockMode1&nbsp;<\/td><td class=\"fielddoc\"><p>Clock idle low, sample on falling edge. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga9308807377a9f1b25c19bc60d9f64674a18be11341f18d1785f850cb21bb46472\"><\/a>usartClockMode2&nbsp;<\/td><td class=\"fielddoc\"><p>Clock idle high, sample on falling edge. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga9308807377a9f1b25c19bc60d9f64674a18786d9a20333f941d97df4cc120c065\"><\/a>usartClockMode3&nbsp;<\/td><td class=\"fielddoc\"><p>Clock idle high, sample on rising edge. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga4622379ccdcc531ab7f9e7e1cefe404f\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga4622379ccdcc531ab7f9e7e1cefe404f\">◆&nbsp;<\/a><\/span>USART_IrDAPw_Typedef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga4622379ccdcc531ab7f9e7e1cefe404f\" class=\"el\">USART_IrDAPw_Typedef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Pulse width selection for IrDA mode. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga4622379ccdcc531ab7f9e7e1cefe404fa097e8f5cccceea24436855d27fef393b\"><\/a>usartIrDAPwONE&nbsp;<\/td><td class=\"fielddoc\"><p>IrDA pulse width is 1/16 for OVS=0 and 1/8 for OVS=1. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga4622379ccdcc531ab7f9e7e1cefe404fac9490d2c769e384a76cc20a899eae81c\"><\/a>usartIrDAPwTWO&nbsp;<\/td><td class=\"fielddoc\"><p>IrDA pulse width is 2/16 for OVS=0 and 2/8 for OVS=1. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga4622379ccdcc531ab7f9e7e1cefe404fa6af98696ba6fa19437ee62aeff9c3f2c\"><\/a>usartIrDAPwTHREE&nbsp;<\/td><td class=\"fielddoc\"><p>IrDA pulse width is 3/16 for OVS=0 and 3/8 for OVS=1. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga4622379ccdcc531ab7f9e7e1cefe404fa75e466f4707b6e2f01034a580819f169\"><\/a>usartIrDAPwFOUR&nbsp;<\/td><td class=\"fielddoc\"><p>IrDA pulse width is 4/16 for OVS=0 and 4/8 for OVS=1. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"gab8a8e724d03a6cdaebc8f5c61a5e3e87\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab8a8e724d03a6cdaebc8f5c61a5e3e87\">◆&nbsp;<\/a><\/span>USART_I2sFormat_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#gab8a8e724d03a6cdaebc8f5c61a5e3e87\" class=\"el\">USART_I2sFormat_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>I2S format selection. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a885574e8bb0ebc4f19e722a01e8e9c19\"><\/a>usartI2sFormatW32D32&nbsp;<\/td><td class=\"fielddoc\"><p>32-bit word, 32-bit data. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87afd35bd8625dfaacfaae662096ded9d8b\"><\/a>usartI2sFormatW32D24M&nbsp;<\/td><td class=\"fielddoc\"><p>32-bit word, 32-bit data with 8 lsb masked. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a379eb9eb76e596c450dc9e1cd1b0e35b\"><\/a>usartI2sFormatW32D24&nbsp;<\/td><td class=\"fielddoc\"><p>32-bit word, 24-bit data. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a234782db65ab8a8e95d7bc85930849ae\"><\/a>usartI2sFormatW32D16&nbsp;<\/td><td class=\"fielddoc\"><p>32-bit word, 16-bit data. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a8e390f7546aabde96d3d0381ead96a7c\"><\/a>usartI2sFormatW32D8&nbsp;<\/td><td class=\"fielddoc\"><p>32-bit word, 8-bit data. <\/p>\n<p><br>\n <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a598f4a0908698acf12a6c865119e1dac\"><\/a>usartI2sFormatW16D16&nbsp;<\/td><td class=\"fielddoc\"><p>16-bit word, 16-bit data. <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a34b640529c603f7ceb104a1f84acff1c\"><\/a>usartI2sFormatW16D8&nbsp;<\/td><td class=\"fielddoc\"><p>16-bit word, 8-bit data. <\/p>\n<p><br>\n <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"ggab8a8e724d03a6cdaebc8f5c61a5e3e87a0ea5b61e0848f94e31ab651128fa6055\"><\/a>usartI2sFormatW8D8&nbsp;<\/td><td class=\"fielddoc\"><p>8-bit word, 8-bit data. <\/p>\n<p><br>\n <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<a id=\"ga3ddf14445cc284b6b54f07fbbd34c9ba\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3ddf14445cc284b6b54f07fbbd34c9ba\">◆&nbsp;<\/a><\/span>USART_I2sJustify_TypeDef<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">enum <a href=\"#ga3ddf14445cc284b6b54f07fbbd34c9ba\" class=\"el\">USART_I2sJustify_TypeDef<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>I2S frame data justify. <\/p>\n<table class=\"fieldtable\">\n<tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\"><a id=\"gga3ddf14445cc284b6b54f07fbbd34c9baa38c6d77a15a0dbd19781744db0d94866\"><\/a>usartI2sJustifyLeft&nbsp;<\/td><td class=\"fielddoc\"><p>Data is left-justified within the frame. <\/p>\n<p><br>\n <\/p>\n<\/td><\/tr>\n<tr><td class=\"fieldname\"><a id=\"gga3ddf14445cc284b6b54f07fbbd34c9baa724e3b72fbdb569541b24acad86a5b93\"><\/a>usartI2sJustifyRight&nbsp;<\/td><td class=\"fielddoc\"><p>Data is right-justified within the frame. <\/p>\n<\/td><\/tr>\n<\/tbody><\/table>\n\n<\/div>\n<\/div>\n<\/div>\n      <div ub-in-page=\"6062051aebaf71079a7b414b\"><\/div>\n      <\/article>\n    ","url":"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-usart","status":"success"}
