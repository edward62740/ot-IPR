{"requiredByTree":[{"children":[{"keyWords":"ot_stack_mtd","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"ot_stack_mtd","isConfigurable":true,"documentation":"","description":"This component provides the OpenThread stack for a Minimal Thread Device (MTD)","instantiable":false,"label":"Stack (MTD)","type":"component","quality":"PRODUCTION","isUserSelected":true,"tags":"","path":"studiocomproot-OpenThread|studiocomproot-OpenThread-ot_stack_mtd","isEditable":true,"isEnabled":true,"name":"ot_stack_mtd","isSelected":true,"id":"studiocomproot-OpenThread-ot_stack_mtd"}],"isEnabled":true,"name":"OpenThread","id":"studiocomproot-OpenThread","label":"OpenThread","type":"category"}],"component":{"keyWords":"ot_platform_abstraction","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"ot_platform_abstraction","isConfigurable":false,"documentation":"","description":"This component provides the abstraction layer between the OpenThread stack and Silicon Labs platform","instantiable":false,"label":"Platform Abstraction","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"ot_platform_abstraction","isEditable":false,"isEnabled":true,"name":"ot_platform_abstraction","isSelected":true,"id":"ot_platform_abstraction"},"requiresTree":[{"children":[{"children":[{"keyWords":"emlib_msc","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"emlib_msc","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/emlib/api/efr32xg24/group-msc","description":"Flash controller (MSC) peripheral API\n","instantiable":false,"label":"MSC","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Peripheral|studiocomproot-Platform-Peripheral-emlib_msc","isEditable":false,"isEnabled":true,"name":"emlib_msc","isSelected":true,"id":"studiocomproot-Platform-Peripheral-emlib_msc"},{"keyWords":"emlib_rmu","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"emlib_rmu","isConfigurable":false,"documentation":"","description":"Reset Management Unit (RMU) peripheral API\n","instantiable":false,"label":"RMU","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Peripheral|studiocomproot-Platform-Peripheral-emlib_rmu","isEditable":false,"isEnabled":true,"name":"emlib_rmu","isSelected":true,"id":"studiocomproot-Platform-Peripheral-emlib_rmu"}],"isEnabled":true,"name":"Peripheral","id":"studiocomproot-Platform-Peripheral","label":"Peripheral","type":"category"},{"children":[{"keyWords":"rail_util_pa","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"rail_util_pa","isConfigurable":true,"documentation":"http://docs.silabs.com/rail/2.12/rail-util-pa","description":"Utility to aid with RAIL RF Power Amplifier (PA) Support","instantiable":false,"label":"RAIL Utility, PA","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Radio|studiocomproot-Platform-Radio-rail_util_pa","isEditable":true,"isEnabled":true,"name":"rail_util_pa","isSelected":true,"id":"studiocomproot-Platform-Radio-rail_util_pa"},{"keyWords":"rail_util_rssi","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"rail_util_rssi","isConfigurable":true,"documentation":"http://docs.silabs.com/rail/2.12/rail-util-rssi","description":"Utility to aid with Received Signal Strength Indicator (RSSI) Support","instantiable":false,"label":"RAIL Utility, RSSI","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Radio|studiocomproot-Platform-Radio-rail_util_rssi","isEditable":true,"isEnabled":true,"name":"rail_util_rssi","isSelected":true,"id":"studiocomproot-Platform-Radio-rail_util_rssi"}],"isEnabled":true,"name":"Radio","id":"studiocomproot-Platform-Radio","label":"Radio","type":"category"},{"children":[{"children":[{"keyWords":"sli_protocol_crypto","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"sli_protocol_crypto","isConfigurable":false,"documentation":"","description":"This component provides accelerated cryptographic primitives using the CRYPTO (series-1) and RADIOAES (series-2) peripherals.\n\nNOTE: This component is primarily meant for internal (Silicon Labs) use.","instantiable":false,"label":"Accelerated Crypto Primitives (CRYPTO and RADIOAES)","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Security|studiocomproot-Platform-Security-Internal|studiocomproot-Platform-Security-Internal-sli_protocol_crypto","isEditable":false,"isEnabled":true,"name":"sli_protocol_crypto","isSelected":true,"id":"studiocomproot-Platform-Security-Internal-sli_protocol_crypto"}],"isEnabled":true,"name":"Internal","id":"studiocomproot-Platform-Security-Internal","label":"Internal","type":"category"}],"isEnabled":true,"name":"Security","id":"studiocomproot-Platform-Security","label":"Security","type":"category"},{"children":[{"keyWords":"cpp_support","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"cpp_support","isConfigurable":false,"documentation":"","description":"C++ support for project. Adds C++ standard library for GCC.\n","instantiable":false,"label":"Toolchain: C++ Support","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Toolchain|studiocomproot-Platform-Toolchain-cpp_support","isEditable":false,"isEnabled":true,"name":"cpp_support","isSelected":true,"id":"studiocomproot-Platform-Toolchain-cpp_support"}],"isEnabled":true,"name":"Toolchain","id":"studiocomproot-Platform-Toolchain","label":"Toolchain","type":"category"},{"children":[{"keyWords":"component_catalog","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"component_catalog","isConfigurable":false,"documentation":"","description":"Component catalog that provides the list of APIs present in the project.","instantiable":false,"label":"Component Catalog","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Utilities|studiocomproot-Platform-Utilities-component_catalog","isEditable":false,"isEnabled":true,"name":"component_catalog","isSelected":true,"id":"studiocomproot-Platform-Utilities-component_catalog"},{"keyWords":"silabs_core_sl_malloc","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"silabs_core_sl_malloc","isConfigurable":false,"documentation":"","description":"This component provides a thread safe wrapper on top of the standard c memory allocation functions.\nThe component can be used in an environment where Micrium OS or FreeRTOS is used in order to safely\nallocate and free memory in multiple tasks from a shared heap.\n\nThe wrapper functions are called sl_malloc(), sl_calloc, sl_realloc() and sl_free().","instantiable":false,"label":"Malloc Wrapper","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Platform|studiocomproot-Platform-Utilities|studiocomproot-Platform-Utilities-silabs_core_sl_malloc","isEditable":false,"isEnabled":true,"name":"silabs_core_sl_malloc","isSelected":true,"id":"studiocomproot-Platform-Utilities-silabs_core_sl_malloc"}],"isEnabled":true,"name":"Utilities","id":"studiocomproot-Platform-Utilities","label":"Utilities","type":"category"}],"isEnabled":true,"name":"Platform","id":"studiocomproot-Platform","label":"Platform","type":"category"},{"children":[{"children":[{"keyWords":"device_init_core","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"device_init_core","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-device-init","description":"This initialization configures the device to a state as similar to later  revisions as possible to improve software compatibility with newer parts.\n","instantiable":false,"label":"Chip Initialization","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-Device_Initialization|studiocomproot-Services-Device_Initialization-device_init_core","isEditable":false,"isEnabled":true,"name":"device_init_core","isSelected":true,"id":"studiocomproot-Services-Device_Initialization-device_init_core"},{"keyWords":"device_init","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"device_init","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-device-init","description":"Device initialization wrapper. Depends on specific device initialization components depending on the selected hardware.\n","instantiable":false,"label":"Device Init","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-Device_Initialization|studiocomproot-Services-Device_Initialization-device_init","isEditable":false,"isEnabled":true,"name":"device_init","isSelected":true,"id":"studiocomproot-Services-Device_Initialization-device_init"}],"isEnabled":true,"name":"Device Initialization","id":"studiocomproot-Services-Device_Initialization","label":"Device Initialization","type":"category"},{"children":[{"keyWords":"nvm3_default","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"nvm3_default","isConfigurable":true,"documentation":"http://docs.silabs.com/gecko-platform/4.0/driver/api/group-nvm3default","description":"This component provides functions to initialize/deinitialize the default NVM3 instance. The instance can be accessed with the NVM3 API by using the nvm3_defaultHandle provided in nvm3_default.h as the nvm3_Handle_t pointer.\n\nIf the Services->Runtime->System Setup component is included in a project, the default instance will be initialized automatically, using the default instance configuration, during the sl_system_init() call in main.c.\n\nSelecting this component will also include the NVM3 Core component, which is the implementation of the NVM3 driver itself.\n","instantiable":false,"label":"NVM3 Default Instance","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-NVM3|studiocomproot-Services-NVM3-nvm3_default","isEditable":true,"isEnabled":true,"name":"nvm3_default","isSelected":true,"id":"studiocomproot-Services-NVM3-nvm3_default"}],"isEnabled":true,"name":"NVM3","id":"studiocomproot-Services-NVM3","label":"NVM3","type":"category"},{"children":[{"keyWords":"sl_system_init","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"sl_system_init","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-system","description":"System Init component provides a function for initializing the system\nand the products:\n\n  * sl_system_init().\n\nThis function calls a set of functions that are automatically generated\nand located in `$autogen/sl_event_handler.c`. Handlers can be registered\nfor the following events using the Event Handler API provided by the\nEvent Handler component:\n\n  * platform_init      -> sl_platform_init()\n  * driver_init        -> sl_driver_init()\n  * service_init       -> sl_service_init()\n  * stack_init         -> sl_stack_init()\n  * internal_app_init  -> sl_internal_app_init()\n\nThese events are fired in the order listed above when `sl_system_init()`\nis called.\n\nUsage example:\n\n```c\n\\#include sl_component_catalog.h\n\\#include sl_system_init.h\n\\#include sl_power_manager.h\n\\#include app.h\n\\#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)\n\\#include sl_power_manager.h\n\\#endif\n\\#if defined(SL_CATALOG_KERNEL_PRESENT)\n\\#include sl_system_kernel.h\n\\#else // SL_CATALOG_KERNEL_PRESENT\n\\#include sl_system_process_action.h\n\\#endif // SL_CATALOG_KERNEL_PRESENT\n\nint main(void)\n{\n  // Initialize Silicon Labs device, system, service(s) and protocol stack(s).\n  // Note that if the kernel is present, processing task(s) will be created by\n  // this call.\n  sl_system_init();\n\n  // Initialize the application.\n  app_init();\n\n\\#if defined(SL_CATALOG_KERNEL_PRESENT)\n  // Start the kernel. Task(s) created in app_init() will start running.\n  sl_system_kernel_start();\n\\#else // SL_CATALOG_KERNEL_PRESENT\n  while (1) {\n    // Do not remove this call: Silicon Labs components process action routine\n    // must be called from the super loop.\n    sl_system_process_action();\n\n    // Application process.\n    app_process_action();\n\n\\#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)\n    // Let the CPU go to sleep if the system allows it.\n    sl_power_manager_sleep();\n\\#endif\n  }\n\\#endif // SL_CATALOG_KERNEL_PRESENT\n}\n```\n","instantiable":false,"label":"System Init","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-System_Setup|studiocomproot-Services-System_Setup-sl_system_init","isEditable":false,"isEnabled":true,"name":"sl_system_init","isSelected":true,"id":"studiocomproot-Services-System_Setup-sl_system_init"},{"keyWords":"sl_system_process_action","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"sl_system_process_action","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-system","description":"System Process Action component provides a function for running the products\nfrom a super loop:\n\n  * sl_system_process_action().\n\nThis function calls a set of functions that are automatically generated\nand located in `$autogen/sl_event_handler.c`. Handlers can be registered\nfor the following events using the Event Handler API provided by the\nEvent Handler component:\n\n  * platform_process_action     -> sl_platform_process_action()\n  * service_process_action      -> sl_service_process_action()\n  * stack_process_action        -> sl_stack_process_action()\n  * internal_app_process_action -> sl_internal_process_action()\n\nThese events are fired in the order listed above when `sl_system_process_action()`\nis called.\n\nUsage example:\n\n```c\n\\#include sl_component_catalog.h\n\\#include sl_system_init.h\n\\#include sl_power_manager.h\n\\#include app.h\n\\#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)\n\\#include sl_power_manager.h\n\\#endif\n\\#if defined(SL_CATALOG_KERNEL_PRESENT)\n\\#include sl_system_kernel.h\n\\#else // SL_CATALOG_KERNEL_PRESENT\n\\#include sl_system_process_action.h\n\\#endif // SL_CATALOG_KERNEL_PRESENT\n\nint main(void)\n{\n  // Initialize Silicon Labs device, system, service(s) and protocol stack(s).\n  // Note that if the kernel is present, processing task(s) will be created by\n  // this call.\n  sl_system_init();\n\n  // Initialize the application.\n  app_init();\n\n\\#if defined(SL_CATALOG_KERNEL_PRESENT)\n  // Start the kernel. Task(s) created in app_init() will start running.\n  sl_system_kernel_start();\n\\#else // SL_CATALOG_KERNEL_PRESENT\n  while (1) {\n    // Do not remove this call: Silicon Labs components process action routine\n    // must be called from the super loop.\n    sl_system_process_action();\n\n    // Application process.\n    app_process_action();\n\n\\#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)\n    // Let the CPU go to sleep if the system allows it.\n    sl_power_manager_sleep();\n\\#endif\n  }\n\\#endif // SL_CATALOG_KERNEL_PRESENT\n}\n```\n","instantiable":false,"label":"System Process Action","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-System_Setup|studiocomproot-Services-System_Setup-sl_system_process_action","isEditable":false,"isEnabled":true,"name":"sl_system_process_action","isSelected":true,"id":"studiocomproot-Services-System_Setup-sl_system_process_action"}],"isEnabled":true,"name":"System Setup","id":"studiocomproot-Services-System_Setup","label":"System Setup","type":"category"},{"keyWords":"mpu","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"mpu","isConfigurable":false,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-mpu","description":"Simple driver that configures the MPU to detect code injection attacks.","instantiable":false,"label":"Simple MPU","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-mpu","isEditable":false,"isEnabled":true,"name":"mpu","isSelected":true,"id":"studiocomproot-Services-mpu"},{"keyWords":"sleeptimer","img":"http://127.0.0.1:58741/resources/icons/slcv_common/placeholder-light.png","componentId":"sleeptimer","isConfigurable":true,"documentation":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-sleeptimer","description":"Low-frequency timer utilities (timer, delays and time keeping).","instantiable":false,"label":"Sleep Timer","type":"component","quality":"PRODUCTION","isUserSelected":false,"tags":"","path":"studiocomproot-Services|studiocomproot-Services-sleeptimer","isEditable":true,"isEnabled":true,"name":"sleeptimer","isSelected":true,"id":"studiocomproot-Services-sleeptimer"}],"isEnabled":true,"name":"Services","id":"studiocomproot-Services","label":"Services","type":"category"}]}
