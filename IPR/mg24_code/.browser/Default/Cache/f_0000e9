{"html":"\n      <article>\n        <div class=\"header\">\n  \n  <div class=\"headertitle\">\n  <h1 class=\"title\">Sleep Timer<\/h1><\/div>\n<\/div><!--header-->\n<div class=\"contents\">\n<a name=\"details\" id=\"details\"><\/a><h2 class=\"groupheader\">Description<\/h2>\n<p>Sleep Timer can be used for creating timers which are tightly integrated with power management. The Power Manager requires precision timing to have all clocks ready on time, so that wakeup happens a little bit earlier to prepare the system to be ready at the right time. Sleep Timer uses one Hardware Timer and creates multiple software timer instances.<\/p>\n<p>The sleeptimer.c and sleeptimer.h source files for the SLEEPTIMER device driver library are in the service/sleeptimer folder.<\/p>\n<ul>\n<li><a href=\"#sleeptimer-intro\" class=\"el\">Introduction<\/a> <\/li>\n<li><a href=\"#sleeptimer-functionalities-overview\" class=\"el\">Functionalities overview<\/a> <\/li>\n<li><a href=\"#sleeptimer-getting-started\" class=\"el\">Getting Started<\/a> <\/li>\n<li><a href=\"#sleeptimer-conf\" class=\"el\">Configuration Options<\/a> <\/li>\n<li><a href=\"#sleeptimer-api\" class=\"el\">The API<\/a> <\/li>\n<li><a href=\"#sleeptimer-example\" class=\"el\">Example<\/a><\/li>\n<\/ul>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-intro\"><\/a>\nIntroduction<\/h1>\n<p>The Sleeptimer driver provides software timers, delays, timekeeping and date functionalities using a low-frequency real-time clock peripheral.<\/p>\n<p>All Silicon Labs microcontrollers equipped with the RTC or RTCC peripheral are currently supported. Only one instance of this driver can be initialized by the application.<\/p>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-functionalities-overview\"><\/a>\nFunctionalities overview<\/h1>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"software-timers\"><\/a>\nSoftware Timers<\/h2>\n<p>This functionality allows the user to create periodic and one shot timers. A user callback can be associated with a timer and is called when the timer expires.<\/p>\n<p>Timer structures must be allocated by the user. The function is called from within an interrupt handler with interrupts enabled.<\/p>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"timekeeping\"><\/a>\nTimekeeping<\/h2>\n<p>A 64-bits tick counter is accessible through the <\/p><ul>\n<li>uint64_t <a href=\"#gaaf928eeb3dad0d43098b3aed9049959a\" class=\"el\" title=\"Gets current 64 bits global tick count.\">sl_sleeptimer_get_tick_count64(void)<\/a> API. It keeps the tick count since the initialization of the driver<\/li>\n<\/ul>\n<p>The <code>SL_SLEEPTIMER_WALLCLOCK_CONFIG<\/code> configuration enables a UNIX timestamp (seconds count since January 1, 1970, 00:00:00).<\/p>\n<p>This timestamp can be retrieved/modified using the following API:<\/p>\n<ul>\n<li>sl_sleeptimer_timestamp_t <a href=\"#ga4d79ef7aa10606814bcc21053bfca558\" class=\"el\" title=\"Retrieves current time.\">sl_sleeptimer_get_time(void)<\/a>; <\/li>\n<li>sl_status_t <a href=\"#gafbd64c7fbf7b0dfb7947a6f7bf288dca\" class=\"el\" title=\"Sets current time.\">sl_sleeptimer_set_time(sl_sleeptimer_timestamp_t time)<\/a>;<\/li>\n<\/ul>\n<p>Convenience conversion functions are provided to convert UNIX timestamp to/from NTP and Zigbee cluster format :<\/p>\n<ul>\n<li>sl_status_t <a href=\"#gaf63bbad4e29c0b655b3d210bf3b3b086\" class=\"el\" title=\"Converts Unix timestamp into NTP timestamp.\">sl_sleeptimer_convert_unix_time_to_ntp(sl_sleeptimer_timestamp_t time, uint32_t *ntp_time)<\/a>; <\/li>\n<li>sl_status_t <a href=\"#gaff086ed922350c8a4cffeed024d03871\" class=\"el\" title=\"Converts NTP timestamp into Unix timestamp.\">sl_sleeptimer_convert_ntp_time_to_unix(uint32_t ntp_time, sl_sleeptimer_timestamp_t *time)<\/a>; <\/li>\n<li>sl_status_t <a href=\"#gaa73b94e0c15a1e2cf6b3cb0b37120ed4\" class=\"el\" title=\"Converts Unix timestamp into Zigbee timestamp.\">sl_sleeptimer_convert_unix_time_to_zigbee(sl_sleeptimer_timestamp_t time, uint32_t *zigbee_time)<\/a>; <\/li>\n<li>sl_status_t <a href=\"#gaab1267658b2ac5e4249e87412ce7dede\" class=\"el\" title=\"Converts Zigbee timestamp into Unix timestamp.\">sl_sleeptimer_convert_zigbee_time_to_unix(uint32_t zigbee_time, sl_sleeptimer_timestamp_t *time)<\/a>;<\/li>\n<\/ul>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"date\"><\/a>\nDate<\/h2>\n<p>The previously described internal timestamp can also be retrieved/modified in a date format sl_sleeptimer_date_t.<\/p>\n<p><br>\n <b>API :<\/b> <br>\n <\/p><ul>\n<li>sl_status_t <a href=\"#ga2955c70feb8e0082ba54e30d2629d840\" class=\"el\" title=\"Gets current date.\">sl_sleeptimer_get_datetime(sl_sleeptimer_date_t *date)<\/a>; <\/li>\n<li>sl_status_t <a href=\"#ga840c8ef8049b364a45899320a9f0c8bf\" class=\"el\" title=\"Sets current time, in date format.\">sl_sleeptimer_set_datetime(sl_sleeptimer_date_t *date)<\/a>;<\/li>\n<\/ul>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"frequency-setup\"><\/a>\nFrequency Setup and Tick Count<\/h2>\n<p>This driver works with a configurable time unit called tick.<\/p>\n<p>The frequency of the ticks is based on the clock source and the internal frequency divider.<\/p>\n<p>One of the following clock sources must be enabled before initializing the sleeptimer:<\/p>\n<ul>\n<li>LFXO: external crystal oscillator. Typically running at 32.768 kHz. <\/li>\n<li>LFRCO: internal oscillator running at 32.768 kHz <\/li>\n<li>ULFRCO: Ultra low-frequency oscillator running at 1.000 kHz<\/li>\n<\/ul>\n<p>The frequency divider is selected with the <code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> configuration. Its value must be a power of two within the range of 1 to 32. The number of ticks per second (sleeptimer frequency) is dictated by the following formula:<\/p>\n<p>Tick (seconds) = 1 / (clock_frequency / frequency_divider)<\/p>\n<p>The highest resolution for a tick is 30.5 us. It is achieved with a 32.768 kHz clock and a divider of 1.<\/p>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-getting-started\"><\/a>\nGetting Started<\/h1>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"clock-selection\"><\/a>\nClock Selection<\/h2>\n<p>The sleeptimer relies on the hardware timer to operate. The hardware timer peripheral must be properly clocked from the application. Selecting the appropriate timer is crucial for design considerations. Each timer can potentially be used as a sleeptimer and is also available to the user. However, note that if a timer is used by the sleeptimer, it can't be used by the application and vice versa.<\/p>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"Clock\"><\/a>\nSelection in a Project without Micrium OS<\/h2>\n<p>When RTC, RTCC, or BURTC is selected, the clock source for the peripheral must be configured and enabled in the application before initializing the sleeptimer module or any communication stacks. Most of the time, it consists in enabling the desired oscillators and setting up the clock source for the peripheral, like in the following example:<\/p>\n<div class=\"fragment\"><div class=\"line\">CMU_ClockSelectSet(cmuClock_LFE, cmuSelect_LFRCO);<\/div>\n<div class=\"line\">CMU_ClockEnable(cmuClock_RTCC, <span class=\"keyword\">true<\/span>);<\/div>\n<\/div><!-- fragment --><p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"clock-branch-select\"><\/a>\nClock Branch Select<\/h2>\n<table class=\"markdownTable\">\n<tbody><tr class=\"markdownTableHead\">\n<th class=\"markdownTableHeadNone\">Clock <\/th><th class=\"markdownTableHeadNone\">Enum <\/th><th class=\"markdownTableHeadNone\">Description <\/th><th class=\"markdownTableHeadNone\">Frequency  <\/th><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\">LFXO <\/td><td class=\"markdownTableBodyNone\"><b>cmuSelect_LFXO<\/b> <\/td><td class=\"markdownTableBodyNone\">Low-frequency crystal oscillator <\/td><td class=\"markdownTableBodyNone\">32.768 Khz  <\/td><\/tr>\n<tr class=\"markdownTableRowEven\">\n<td class=\"markdownTableBodyNone\">LFRCO <\/td><td class=\"markdownTableBodyNone\"><b>cmuSelect_LFRCO<\/b> <\/td><td class=\"markdownTableBodyNone\">Low-frequency RC oscillator <\/td><td class=\"markdownTableBodyNone\">32.768 Khz  <\/td><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\">ULFRCO <\/td><td class=\"markdownTableBodyNone\"><b>cmuSelect_ULFRCO<\/b> <\/td><td class=\"markdownTableBodyNone\">Ultra low-frequency RC oscillator <\/td><td class=\"markdownTableBodyNone\">1 Khz  <\/td><\/tr>\n<\/tbody><\/table>\n<p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"timer-clock-enable\"><\/a>\nTimer Clock Enable<\/h2>\n<table class=\"markdownTable\">\n<tbody><tr class=\"markdownTableHead\">\n<th class=\"markdownTableHeadNone\">Module <\/th><th class=\"markdownTableHeadNone\">Enum <\/th><th class=\"markdownTableHeadNone\">Description  <\/th><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\">RTCC <\/td><td class=\"markdownTableBodyNone\"><b>cmuClock_RTCC<\/b> <\/td><td class=\"markdownTableBodyNone\">Real-time counter and calendar clock (LF E branch)  <\/td><\/tr>\n<tr class=\"markdownTableRowEven\">\n<td class=\"markdownTableBodyNone\">RTC <\/td><td class=\"markdownTableBodyNone\"><b>cmuClock_RTC<\/b> <\/td><td class=\"markdownTableBodyNone\">Real time counter clock (LF A branch)  <\/td><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\">BURTC <\/td><td class=\"markdownTableBodyNone\"><b>cmuClock_BURTC<\/b> <\/td><td class=\"markdownTableBodyNone\">BURTC clock (EM4 Group A branch)  <\/td><\/tr>\n<\/tbody><\/table>\n<p>When the Radio internal RTC (PRORTC) is selected, it is not necessary to configure the clock source for the peripheral. However, it is important to enable the desired oscillator before initializing the sleeptimer module or any communication stacks. The best oscillator available (LFXO being the first choice) will be used by the sleeptimer at initalization. The following example shows how the desired oscilator should be enabled:<\/p>\n<div class=\"fragment\"><div class=\"line\">CMU_OscillatorEnable(cmuSelect_LFXO, <span class=\"keyword\">true<\/span>, <span class=\"keyword\">true<\/span>);<\/div>\n<\/div><!-- fragment --><p><br>\n <\/p>\n<h2><a class=\"anchor\" id=\"clock-micrium-os\"><\/a>\nClock Selection in a Project with Micrium OS<\/h2>\n<p>When Micrium OS is used, a BSP (all instances) is provided that sets up some parts of the clock tree. The sleeptimer clock source will be enabled by this bsp. However, the desired oscillator remains configurable from the file <b>bsp_cfg.h<\/b>.<\/p>\n<p>The configuration <code>BSP_LF_CLK_SEL<\/code> determines which oscillator will be used by the sleeptimer's hardware timer peripheral. It can take the following values:<\/p>\n<table class=\"markdownTable\">\n<tbody><tr class=\"markdownTableHead\">\n<th class=\"markdownTableHeadNone\">Config <\/th><th class=\"markdownTableHeadNone\">Description <\/th><th class=\"markdownTableHeadNone\">Frequency  <\/th><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\"><b>BSP_LF_CLK_LFXO<\/b> <\/td><td class=\"markdownTableBodyNone\">Low-frequency crystal oscillator <\/td><td class=\"markdownTableBodyNone\">32.768 Khz  <\/td><\/tr>\n<tr class=\"markdownTableRowEven\">\n<td class=\"markdownTableBodyNone\"><b>BSP_LF_CLK_LFRCO<\/b> <\/td><td class=\"markdownTableBodyNone\">Low-frequency RC oscillator <\/td><td class=\"markdownTableBodyNone\">32.768 Khz  <\/td><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\"><b>BSP_LF_CLK_ULFRCO<\/b> <\/td><td class=\"markdownTableBodyNone\">Ultra low-frequency RC oscillator <\/td><td class=\"markdownTableBodyNone\">1 Khz  <\/td><\/tr>\n<\/tbody><\/table>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-conf\"><\/a>\nConfiguration Options<\/h1>\n<p><code>SL_SLEEPTIMER_PERIPHERAL<\/code> can be set to one of the following values:<\/p>\n<table class=\"markdownTable\">\n<tbody><tr class=\"markdownTableHead\">\n<th class=\"markdownTableHeadNone\">Config <\/th><th class=\"markdownTableHeadNone\">Description  <\/th><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\"><code>SL_SLEEPTIMER_PERIPHERAL_DEFAULT<\/code> <\/td><td class=\"markdownTableBodyNone\">Selects either RTC or RTCC, depending of what is available on the platform.  <\/td><\/tr>\n<tr class=\"markdownTableRowEven\">\n<td class=\"markdownTableBodyNone\"><code>SL_SLEEPTIMER_PERIPHERAL_RTCC<\/code> <\/td><td class=\"markdownTableBodyNone\">Selects RTCC  <\/td><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\"><code>SL_SLEEPTIMER_PERIPHERAL_RTC<\/code> <\/td><td class=\"markdownTableBodyNone\">Selects RTC  <\/td><\/tr>\n<tr class=\"markdownTableRowEven\">\n<td class=\"markdownTableBodyNone\"><code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code> <\/td><td class=\"markdownTableBodyNone\">Selects Internal radio RTC. Available only on EFR32XG13, EFR32XG14, EFR32XG21 and EFR32XG22 families.  <\/td><\/tr>\n<tr class=\"markdownTableRowOdd\">\n<td class=\"markdownTableBodyNone\"><code>SL_SLEEPTIMER_PERIPHERAL_BURTC<\/code> <\/td><td class=\"markdownTableBodyNone\">Selects BURTC. Not available on Series 0 devices.  <\/td><\/tr>\n<\/tbody><\/table>\n<p><code>SL_SLEEPTIMER_WALLCLOCK_CONFIG<\/code> must be set to 1 to enable timestamp and date functionnalities.<\/p>\n<p><code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> must be a power of 2 within the range 1 to 32. When <code>SL_SLEEPTIMER_PERIPHERAL<\/code> is set to <code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code>, <code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> must be set to 1.<\/p>\n<p><code>SL_SLEEPTIMER_PRORTC_HAL_OWNS_IRQ_HANDLER<\/code> is only meaningful when <code>SL_SLEEPTIMER_PERIPHERAL<\/code> is set to <code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code>. Set to 1 if no communication stack is used in your project. Otherwise, must be set to 0.<\/p>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-api\"><\/a>\nThe API<\/h1>\n<p>This section contains brief descriptions of the API functions. For more information about input and output parameters and return values, click on the hyperlinked function names. Most functions return an error code, <code>SL_STATUS_OK<\/code> is returned on success, see sl_status.h for other error codes.<\/p>\n<p>The application code must include the <em>sl_sleeptimer.h<\/em> header file.<\/p>\n<p>All API functions can be called from within interrupt handlers.<\/p>\n<p><a href=\"#gae661a78719a6acc014efa15216ae4a54\" class=\"el\">sl_sleeptimer_init()<\/a> <br>\n These functions initialize the sleeptimer driver. Typically,  sl_sleeptimer_init()  is called once in the startup code.<\/p>\n<p><a href=\"#ga43c32bdb2a9fcfbe279563a9fd689711\" class=\"el\">sl_sleeptimer_start_timer()<\/a> <br>\n Start a one shot 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to  sl_sleeptimer_start_timer(). See <a href=\"#callback\" class=\"el\">callback<\/a> for details of the callback prototype.<\/p>\n<p><a href=\"#gaacd5a666731a0ba4823107e552e23e69\" class=\"el\">sl_sleeptimer_restart_timer()<\/a> <br>\n Restart a one shot 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to  sl_sleeptimer_start_timer(). See <a href=\"#callback\" class=\"el\">callback<\/a> for details of the callback prototype.<\/p>\n<p><a href=\"#ga2ceb1b76334902525dd32e937e90bb16\" class=\"el\">sl_sleeptimer_start_periodic_timer()<\/a> <br>\n Start a periodic 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to  sl_sleeptimer_start_timer(). See <a href=\"#callback\" class=\"el\">callback<\/a> for details of the callback prototype.<\/p>\n<p><a href=\"#gaf54408a7f172b684de33d9a7f4e01be9\" class=\"el\">sl_sleeptimer_restart_periodic_timer()<\/a> <br>\n Restart a periodic 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to  sl_sleeptimer_start_timer(). See <a href=\"#callback\" class=\"el\">callback<\/a> for details of the callback prototype.<\/p>\n<p><a href=\"#ga1f4f25aa754cd35214dba9762450b0ca\" class=\"el\">sl_sleeptimer_stop_timer()<\/a> <br>\n Stop a timer.<\/p>\n<p><a href=\"#ga6a06acb331e2e3c0efeb83f42a4d9c16\" class=\"el\">sl_sleeptimer_get_timer_time_remaining()<\/a> <br>\n Get the time remaining before the timer expires.<\/p>\n<p><a href=\"#ga7d7c4ae596755e3e5e3c0c0aa5e749b3\" class=\"el\">sl_sleeptimer_delay_millisecond()<\/a> <br>\n Delay for the given number of milliseconds. This is an \"active wait\" delay function.<\/p>\n<p><a href=\"#gac0236c1c353317c41d577867e7429874\" class=\"el\">sl_sleeptimer_is_timer_running()<\/a> <br>\n Check if a timer is running.<\/p>\n<p><a href=\"#ga4d79ef7aa10606814bcc21053bfca558\" class=\"el\">sl_sleeptimer_get_time()<\/a>, <a href=\"#gafbd64c7fbf7b0dfb7947a6f7bf288dca\" class=\"el\">sl_sleeptimer_set_time()<\/a> <br>\n Get or set wallclock time.<\/p>\n<p><a href=\"#gadf3a3eb05b0f5adbc7ee488113299f61\" class=\"el\">sl_sleeptimer_ms_to_tick()<\/a>, <a href=\"#ga7484d4be4877b94a687f4410fccc6271\" class=\"el\">sl_sleeptimer_ms32_to_tick()<\/a>, <a href=\"#ga2c2a2a131e401894d3e09513442667b5\" class=\"el\">sl_sleeptimer_tick_to_ms()<\/a>, <a href=\"#ga6882d0577137d8e20ec531be45678fba\" class=\"el\">sl_sleeptimer_tick64_to_ms()<\/a> <br>\n Convert between milliseconds and RTC/RTCC counter ticks.<\/p>\n<p><br>\n <a class=\"anchor\" id=\"callback\"><\/a><b>The timer expiry callback function:<\/b> <br>\n The callback function, prototyped as <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t()<\/a>, is called from within the RTC peripheral interrupt handler on timer expiration.  sl_sleeptimer_timer_callback_t(sl_sleeptimer_timer_handle_t *handle, void *data)<\/p>\n<p><br>\n <\/p>\n<h1><a class=\"anchor\" id=\"sleeptimer-example\"><\/a>\nExample<\/h1>\n<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#include \"sl_sleeptimer.h\"<\/span><\/div>\n<div class=\"line\"> <\/div>\n<div class=\"line\"><span class=\"keywordtype\">void<\/span> my_timer_callback(sl_sleeptimer_timer_handle_t *handle, <span class=\"keywordtype\">void<\/span> *data)<\/div>\n<div class=\"line\">{<\/div>\n<div class=\"line\">  <span class=\"comment\">//Code executed when the timer expire.<\/span><\/div>\n<div class=\"line\">}<\/div>\n<div class=\"line\"> <\/div>\n<div class=\"line\"><span class=\"keywordtype\">int<\/span> start_timer(<span class=\"keywordtype\">void<\/span>)<\/div>\n<div class=\"line\">{<\/div>\n<div class=\"line\">  sl_status_t status;<\/div>\n<div class=\"line\">  sl_sleeptimer_timer_handle_t my_timer;<\/div>\n<div class=\"line\">  uint32_t timer_timeout = 300;<\/div>\n<div class=\"line\"> <\/div>\n<div class=\"line\">  <span class=\"comment\">// We assume the sleeptimer is initialized properly<\/span><\/div>\n<div class=\"line\"> <\/div>\n<div class=\"line\">  status = <a href=\"#ga43c32bdb2a9fcfbe279563a9fd689711\" class=\"code\">sl_sleeptimer_start_timer<\/a>(&amp;my_timer,<\/div>\n<div class=\"line\">                                     timer_timeout,<\/div>\n<div class=\"line\">                                     my_timer_callback,<\/div>\n<div class=\"line\">                                     (<span class=\"keywordtype\">void<\/span> *)NULL,<\/div>\n<div class=\"line\">                                     0,<\/div>\n<div class=\"line\">                                     0);<\/div>\n<div class=\"line\">  <span class=\"keywordflow\">if<\/span>(status != SL_STATUS_OK) {<\/div>\n<div class=\"line\">    <span class=\"keywordflow\">return<\/span> -1;<\/div>\n<div class=\"line\">  }<\/div>\n<div class=\"line\">  <span class=\"keywordflow\">return<\/span> 1;<\/div>\n<div class=\"line\">}<\/div>\n<\/div><!-- fragment --> <table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"nested-classes\"><\/a>\nData Structures<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/service/api/structsl-sleeptimer-timer-handle\" class=\"el\" target=\"_blank\">sl_sleeptimer_timer_handle_t<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Timer structure for sleeptimer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">struct &nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"http://docs.silabs.com/gecko-platform/4.0/service/api/structtime-date\" class=\"el\" target=\"_blank\">time_date<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Time and Date structure.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"func-members\"><\/a>\nFunctions<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga147e840cf5d02d54a06e16bccb8e088d\" class=\"\">SLEEPTIMER_ENUM<\/a> (sl_sleeptimer_month_t)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescRight\">Month enum.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gae1c4c08acb9f670ceb295a6eca059d31\" class=\"\">SLEEPTIMER_ENUM<\/a> (sl_sleeptimer_weekDay_t)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescRight\">Week Day enum.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gae661a78719a6acc014efa15216ae4a54\" class=\"el\">sl_sleeptimer_init<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Initializes the Sleeptimer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga43c32bdb2a9fcfbe279563a9fd689711\" class=\"el\">sl_sleeptimer_start_timer<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Starts a 32 bits timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaacd5a666731a0ba4823107e552e23e69\" class=\"el\">sl_sleeptimer_restart_timer<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Restarts a 32 bits timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga2ceb1b76334902525dd32e937e90bb16\" class=\"el\">sl_sleeptimer_start_periodic_timer<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Starts a 32 bits periodic timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf54408a7f172b684de33d9a7f4e01be9\" class=\"el\">sl_sleeptimer_restart_periodic_timer<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Restarts a 32 bits periodic timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga1f4f25aa754cd35214dba9762450b0ca\" class=\"el\">sl_sleeptimer_stop_timer<\/a> (sl_sleeptimer_timer_handle_t *handle)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Stops a timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac0236c1c353317c41d577867e7429874\" class=\"el\">sl_sleeptimer_is_timer_running<\/a> (sl_sleeptimer_timer_handle_t *handle, bool *running)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets the status of a timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga6a06acb331e2e3c0efeb83f42a4d9c16\" class=\"el\">sl_sleeptimer_get_timer_time_remaining<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t *time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets remaining time until timer expires.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf96ccea3e4d1727dc2fd2fa98f94ccb1\" class=\"el\">sl_sleeptimer_get_remaining_time_of_first_timer<\/a> (uint16_t option_flags, uint32_t *time_remaining)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets the time remaining until the first timer with the matching set of flags expires.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gae0397d420800b7c2d2afd5bbb9710067\" class=\"el\">sl_sleeptimer_get_tick_count<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets current 32 bits global tick count.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint64_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaaf928eeb3dad0d43098b3aed9049959a\" class=\"el\">sl_sleeptimer_get_tick_count64<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets current 64 bits global tick count.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga69085e47b9cc43ac0cfdc08783c13aed\" class=\"el\">sl_sleeptimer_get_timer_frequency<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Get timer frequency.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga157d43fdb64cb0d4afc864155bcf9bc8\" class=\"el\">sl_sleeptimer_convert_time_to_date<\/a> (<a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> time, <a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> time_zone, sl_sleeptimer_date_t *date)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts a Unix timestamp into a date.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gab3c762fbb3fed88f5f256d4c9a03fc67\" class=\"el\">sl_sleeptimer_convert_date_to_time<\/a> (sl_sleeptimer_date_t *date, <a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts a date into a Unix timestamp.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga28561cd8d4b4e31153d3dc02e68f2645\" class=\"el\">sl_sleeptimer_convert_date_to_str<\/a> (char *str, size_t size, const uint8_t *format, sl_sleeptimer_date_t *date)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Convert date to string.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gafbd748d9a4654e9ae474a7020a5d9813\" class=\"el\">sl_sleeptimer_set_tz<\/a> (<a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> offset)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Sets time zone offset.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga91ebac6960e114d933e1ef7c4f32294a\" class=\"el\">sl_sleeptimer_get_tz<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets time zone offset.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a>&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga4d79ef7aa10606814bcc21053bfca558\" class=\"el\">sl_sleeptimer_get_time<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Retrieves current time.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gafbd64c7fbf7b0dfb7947a6f7bf288dca\" class=\"el\">sl_sleeptimer_set_time<\/a> (<a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Sets current time.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga2955c70feb8e0082ba54e30d2629d840\" class=\"el\">sl_sleeptimer_get_datetime<\/a> (sl_sleeptimer_date_t *date)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets current date.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga840c8ef8049b364a45899320a9f0c8bf\" class=\"el\">sl_sleeptimer_set_datetime<\/a> (sl_sleeptimer_date_t *date)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Sets current time, in date format.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga726d2e276fbac02b2246a446c3dcf755\" class=\"el\">sl_sleeptimer_build_datetime<\/a> (sl_sleeptimer_date_t *date, uint16_t year, sl_sleeptimer_month_t month, uint8_t month_day, uint8_t hour, uint8_t min, uint8_t sec, <a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> tzOffset)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Builds a date time structure based on the provided parameters.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf63bbad4e29c0b655b3d210bf3b3b086\" class=\"el\">sl_sleeptimer_convert_unix_time_to_ntp<\/a> (<a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> time, uint32_t *ntp_time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts Unix timestamp into NTP timestamp.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaff086ed922350c8a4cffeed024d03871\" class=\"el\">sl_sleeptimer_convert_ntp_time_to_unix<\/a> (uint32_t ntp_time, <a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts NTP timestamp into Unix timestamp.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaa73b94e0c15a1e2cf6b3cb0b37120ed4\" class=\"el\">sl_sleeptimer_convert_unix_time_to_zigbee<\/a> (<a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> time, uint32_t *zigbee_time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts Unix timestamp into Zigbee timestamp.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaab1267658b2ac5e4249e87412ce7dede\" class=\"el\">sl_sleeptimer_convert_zigbee_time_to_unix<\/a> (uint32_t zigbee_time, <a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *time)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts Zigbee timestamp into Unix timestamp.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga612f86ff5d65f445efb71d4a1eef7386\" class=\"el\">sl_sleeptimer_set_tz_ahead_utc<\/a> (uint8_t hours, uint8_t minutes)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Calculates offset for time zone after UTC-0.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaae029d2985822af973e4cd0333fa92e1\" class=\"el\">sl_sleeptimer_set_tz_behind_utc<\/a> (uint8_t hours, uint8_t minutes)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Calculates offset for time zone before UTC-0.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">void&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7d7c4ae596755e3e5e3c0c0aa5e749b3\" class=\"el\">sl_sleeptimer_delay_millisecond<\/a> (uint16_t time_ms)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Active delay.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gadf3a3eb05b0f5adbc7ee488113299f61\" class=\"el\">sl_sleeptimer_ms_to_tick<\/a> (uint16_t time_ms)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts milliseconds in ticks.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga7484d4be4877b94a687f4410fccc6271\" class=\"el\">sl_sleeptimer_ms32_to_tick<\/a> (uint32_t time_ms, uint32_t *tick)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts 32-bits milliseconds in ticks.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\">sl_sleeptimer_get_max_ms32_conversion<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argument expressed in milliseconds.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga2c2a2a131e401894d3e09513442667b5\" class=\"el\">sl_sleeptimer_tick_to_ms<\/a> (uint32_t tick)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts ticks in milliseconds.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga6882d0577137d8e20ec531be45678fba\" class=\"el\">sl_sleeptimer_tick64_to_ms<\/a> (uint64_t tick, uint64_t *ms)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Converts 64-bit ticks in milliseconds.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">bool&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga0b38592836a9a01d6f315d417d3d6cd9\" class=\"el\">sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire<\/a> (void)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Allow sleep after ISR exit.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gac8c20444c4572f93db0fb3ad3bc2305e\" class=\"el\">sl_sleeptimer_start_timer_ms<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Starts a 32 bits timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga3f3cefcf3dba6d516ca69444d25d8c09\" class=\"el\">sl_sleeptimer_restart_timer_ms<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Restarts a 32 bits timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gae4639653b4bf4ed68049b2a12a6c6d83\" class=\"el\">sl_sleeptimer_start_periodic_timer_ms<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Starts a 32 bits periodic timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">sl_status_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga1a44174e7a8eccbabde499875cb8462a\" class=\"el\">sl_sleeptimer_restart_periodic_timer_ms<\/a> (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, <a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a> callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Restarts a 32 bits periodic timer.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table><table class=\"memberdecls\">\n<tbody><tr class=\"heading\"><td colspan=\"2\"><h2 class=\"groupheader\"><a name=\"typedef-members\"><\/a>\nTypedefs<\/h2><\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef uint32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Timestamp, wall clock time in seconds.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef int32_t&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a><\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Time zone offset from UTC(second).  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<tr class=\"memitem\"><td class=\"memItemLeft\" align=\"right\" valign=\"top\">typedef void(*&nbsp;<\/td><td class=\"memItemRight\" valign=\"bottom\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>) (sl_sleeptimer_timer_handle_t *handle, void *data)<\/td><\/tr>\n<tr class=\"memdesc\"><td class=\"mdescLeft\">&nbsp;<\/td><td class=\"mdescRight\">Typedef for the user supplied callback function which is called when a timer expires.  <br><\/td><\/tr>\n<tr class=\"separator\"><td class=\"memSeparator\" colspan=\"2\">&nbsp;<\/td><\/tr>\n<\/tbody><\/table>\n<h2 class=\"groupheader\">Function Documentation<\/h2>\n<a id=\"ga147e840cf5d02d54a06e16bccb8e088d\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga147e840cf5d02d54a06e16bccb8e088d\">◆&nbsp;<\/a><\/span>SLEEPTIMER_ENUM() <span class=\"overload\">[1/2]<\/span><\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">SLEEPTIMER_ENUM <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_month_t&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Month enum. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"gae1c4c08acb9f670ceb295a6eca059d31\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gae1c4c08acb9f670ceb295a6eca059d31\">◆&nbsp;<\/a><\/span>SLEEPTIMER_ENUM() <span class=\"overload\">[2/2]<\/span><\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">SLEEPTIMER_ENUM <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_weekDay_t&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Week Day enum. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"gae661a78719a6acc014efa15216ae4a54\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gae661a78719a6acc014efa15216ae4a54\">◆&nbsp;<\/a><\/span>sl_sleeptimer_init()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_init <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Initializes the Sleeptimer. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga43c32bdb2a9fcfbe279563a9fd689711\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga43c32bdb2a9fcfbe279563a9fd689711\">◆&nbsp;<\/a><\/span>sl_sleeptimer_start_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_start_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Starts a 32 bits timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout<\/code><\/td><td>Timer timeout, in timer ticks. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaacd5a666731a0ba4823107e552e23e69\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaacd5a666731a0ba4823107e552e23e69\">◆&nbsp;<\/a><\/span>sl_sleeptimer_restart_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_restart_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Restarts a 32 bits timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout<\/code><\/td><td>Timer timeout, in timer ticks. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga2ceb1b76334902525dd32e937e90bb16\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga2ceb1b76334902525dd32e937e90bb16\">◆&nbsp;<\/a><\/span>sl_sleeptimer_start_periodic_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_start_periodic_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Starts a 32 bits periodic timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout<\/code><\/td><td>Timer periodic timeout, in timer ticks. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf54408a7f172b684de33d9a7f4e01be9\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf54408a7f172b684de33d9a7f4e01be9\">◆&nbsp;<\/a><\/span>sl_sleeptimer_restart_periodic_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_restart_periodic_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Restarts a 32 bits periodic timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout<\/code><\/td><td>Timer periodic timeout, in timer ticks. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga1f4f25aa754cd35214dba9762450b0ca\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga1f4f25aa754cd35214dba9762450b0ca\">◆&nbsp;<\/a><\/span>sl_sleeptimer_stop_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_stop_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Stops a timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd><\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac0236c1c353317c41d577867e7429874\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac0236c1c353317c41d577867e7429874\">◆&nbsp;<\/a><\/span>sl_sleeptimer_is_timer_running()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_is_timer_running <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">bool *&nbsp;<\/td>\n          <td class=\"paramname\"><code>running&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets the status of a timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>running<\/code><\/td><td>Pointer to the status of the timer.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>A non periodic timer is considered not running during its callback.<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga6a06acb331e2e3c0efeb83f42a4d9c16\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga6a06acb331e2e3c0efeb83f42a4d9c16\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_timer_time_remaining()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_get_timer_time_remaining <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets remaining time until timer expires. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time<\/code><\/td><td>Time left in timer ticks.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf96ccea3e4d1727dc2fd2fa98f94ccb1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf96ccea3e4d1727dc2fd2fa98f94ccb1\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_remaining_time_of_first_timer()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_get_remaining_time_of_first_timer <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>time_remaining&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets the time remaining until the first timer with the matching set of flags expires. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Set of flags to match.<\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time_remaining<\/code><\/td><td>Time left in timer ticks.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gae0397d420800b7c2d2afd5bbb9710067\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gae0397d420800b7c2d2afd5bbb9710067\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_tick_count()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_get_tick_count <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets current 32 bits global tick count. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Current tick count. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaaf928eeb3dad0d43098b3aed9049959a\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaaf928eeb3dad0d43098b3aed9049959a\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_tick_count64()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint64_t sl_sleeptimer_get_tick_count64 <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets current 64 bits global tick count. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Current tick count. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga69085e47b9cc43ac0cfdc08783c13aed\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga69085e47b9cc43ac0cfdc08783c13aed\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_timer_frequency()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_get_timer_frequency <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Get timer frequency. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga157d43fdb64cb0d4afc864155bcf9bc8\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga157d43fdb64cb0d4afc864155bcf9bc8\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_time_to_date()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_time_to_date <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>time, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>time_zone, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts a Unix timestamp into a date. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time<\/code><\/td><td>Unix timestamp to convert. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time_zone<\/code><\/td><td>Offset from UTC in second. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to converted date.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gab3c762fbb3fed88f5f256d4c9a03fc67\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gab3c762fbb3fed88f5f256d4c9a03fc67\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_date_to_time()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_date_to_time <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts a date into a Unix timestamp. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to date to convert. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time<\/code><\/td><td>Pointer to converted Unix timestamp.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Dates are based on the Unix time representation. Range of dates supported :<ul>\n<li>January 1, 1970, 00:00:00 to January 19, 2038, 03:14:00 <\/li>\n<\/ul>\n<\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga28561cd8d4b4e31153d3dc02e68f2645\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga28561cd8d4b4e31153d3dc02e68f2645\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_date_to_str()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_convert_date_to_str <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">char *&nbsp;<\/td>\n          <td class=\"paramname\"><code>str, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">size_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>size, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">const uint8_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>format, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Convert date to string. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>str<\/code><\/td><td>Output string. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>size<\/code><\/td><td>Size of the input array. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>format<\/code><\/td><td>The format specification character. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to date structure.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if error. Number of character in the output string.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Refer strftime() from UNIX. <a href=\"http://man7.org/linux/man-pages/man3/strftime.3.html\">http://man7.org/linux/man-pages/man3/strftime.3.html<\/a> <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gafbd748d9a4654e9ae474a7020a5d9813\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gafbd748d9a4654e9ae474a7020a5d9813\">◆&nbsp;<\/a><\/span>sl_sleeptimer_set_tz()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void sl_sleeptimer_set_tz <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>offset<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Sets time zone offset. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>offset<\/code><\/td><td>Time zone offset, in seconds. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga91ebac6960e114d933e1ef7c4f32294a\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga91ebac6960e114d933e1ef7c4f32294a\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_tz()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> sl_sleeptimer_get_tz <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets time zone offset. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Time zone offset, in seconds. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga4d79ef7aa10606814bcc21053bfca558\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga4d79ef7aa10606814bcc21053bfca558\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_time()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> sl_sleeptimer_get_time <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Retrieves current time. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Current timestamps in Unix format. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gafbd64c7fbf7b0dfb7947a6f7bf288dca\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gafbd64c7fbf7b0dfb7947a6f7bf288dca\">◆&nbsp;<\/a><\/span>sl_sleeptimer_set_time()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_set_time <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>time<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Sets current time. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time<\/code><\/td><td>Time to set.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga2955c70feb8e0082ba54e30d2629d840\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga2955c70feb8e0082ba54e30d2629d840\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_datetime()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_get_datetime <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets current date. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to a sl_sleeptimer_date_t structure.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga840c8ef8049b364a45899320a9f0c8bf\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga840c8ef8049b364a45899320a9f0c8bf\">◆&nbsp;<\/a><\/span>sl_sleeptimer_set_datetime()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_set_datetime <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Sets current time, in date format. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to current date.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga726d2e276fbac02b2246a446c3dcf755\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga726d2e276fbac02b2246a446c3dcf755\">◆&nbsp;<\/a><\/span>sl_sleeptimer_build_datetime()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_build_datetime <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_date_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>date, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>year, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">sl_sleeptimer_month_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>month, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>month_day, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>hour, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>min, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>sec, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>tzOffset&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Builds a date time structure based on the provided parameters. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>date<\/code><\/td><td>Pointer to the structure to be populated. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>year<\/code><\/td><td>Current year. May be provided based on a 0 Epoch or a 1900 Epoch. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>month<\/code><\/td><td>Months since January. Expected value: 0-11. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>month_day<\/code><\/td><td>Day of the month. Expected value: 1-31. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>hour<\/code><\/td><td>Hours since midnight. Expected value: 0-23. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>min<\/code><\/td><td>Minutes after the hour. Expected value: 0-59. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>sec<\/code><\/td><td>Seconds after the minute. Expected value: 0-59. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>tzOffset<\/code><\/td><td>Offset, in seconds, from UTC.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaf63bbad4e29c0b655b3d210bf3b3b086\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf63bbad4e29c0b655b3d210bf3b3b086\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_unix_time_to_ntp()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_unix_time_to_ntp <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>time, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>ntp_time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts Unix timestamp into NTP timestamp. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time<\/code><\/td><td>Unix timestamp. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>ntp_time<\/code><\/td><td>Pointer to NTP Timestamp.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Unix timestamp range supported : 0x0 to 0x7C55 817F ie. January 1, 1970, 00:00:00 to February 07, 2036, 06:28:15<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaff086ed922350c8a4cffeed024d03871\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaff086ed922350c8a4cffeed024d03871\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_ntp_time_to_unix()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_ntp_time_to_unix <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>ntp_time, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts NTP timestamp into Unix timestamp. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>ntp_time<\/code><\/td><td>NTP Timestamp. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time<\/code><\/td><td>Pointer to Unix timestamp.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>NTP timestamp range supported : 0x83AA 7E80 to 0xFFFF FFFF ie. January 1, 1970, 00:00:00 to February 07, 2036, 06:28:15<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaa73b94e0c15a1e2cf6b3cb0b37120ed4\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaa73b94e0c15a1e2cf6b3cb0b37120ed4\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_unix_time_to_zigbee()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_unix_time_to_zigbee <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>time, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>zigbee_time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts Unix timestamp into Zigbee timestamp. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time<\/code><\/td><td>Unix timestamp.<\/td><\/tr>\n    <tr><td class=\"paramname\"><code>zigbee_time<\/code><\/td><td>Pointer to NTP Timestamp.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>Unix timestamp range supported : 0x386D 4380 to 0x7FFF FFFF ie. January 1, 2000, 00:00:0 to January 19, 2038, 03:14:00<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaab1267658b2ac5e4249e87412ce7dede\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaab1267658b2ac5e4249e87412ce7dede\">◆&nbsp;<\/a><\/span>sl_sleeptimer_convert_zigbee_time_to_unix()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_convert_zigbee_time_to_unix <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>zigbee_time, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a> *&nbsp;<\/td>\n          <td class=\"paramname\"><code>time&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts Zigbee timestamp into Unix timestamp. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>zigbee_time<\/code><\/td><td>NTP Timestamp. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>time<\/code><\/td><td>Pointer to Unix timestamp.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>ZIGBEE timestamp range supported : 0x0 to 0x4792 BC7F ie. January 1, 2000, 00:00:00 to January 19, 2038, 03:14:00<\/dd><\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga612f86ff5d65f445efb71d4a1eef7386\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga612f86ff5d65f445efb71d4a1eef7386\">◆&nbsp;<\/a><\/span>sl_sleeptimer_set_tz_ahead_utc()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> sl_sleeptimer_set_tz_ahead_utc <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>hours, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>minutes&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Calculates offset for time zone after UTC-0. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>hours<\/code><\/td><td>Number of hours from UTC-0. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>minutes<\/code><\/td><td>Number of minutes from UTC-0.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>The time zone offset in seconds. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gaae029d2985822af973e4cd0333fa92e1\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaae029d2985822af973e4cd0333fa92e1\">◆&nbsp;<\/a><\/span>sl_sleeptimer_set_tz_behind_utc()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a> sl_sleeptimer_set_tz_behind_utc <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>hours, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>minutes&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Calculates offset for time zone before UTC-0. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>hours<\/code><\/td><td>Number of hours to UTC-0. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>minutes<\/code><\/td><td>Number of minutes to UTC-0.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>The time zone offset in seconds. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga7d7c4ae596755e3e5e3c0c0aa5e749b3\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7d7c4ae596755e3e5e3c0c0aa5e749b3\">◆&nbsp;<\/a><\/span>sl_sleeptimer_delay_millisecond()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">void sl_sleeptimer_delay_millisecond <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>time_ms<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Active delay. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time_ms<\/code><\/td><td>Delay duration in milliseconds. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gadf3a3eb05b0f5adbc7ee488113299f61\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gadf3a3eb05b0f5adbc7ee488113299f61\">◆&nbsp;<\/a><\/span>sl_sleeptimer_ms_to_tick()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_ms_to_tick <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>time_ms<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts milliseconds in ticks. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time_ms<\/code><\/td><td>Number of milliseconds.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Corresponding ticks number.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The result is \"rounded\" to the superior tick number. This function is light and cannot fail so it should be privilegied to perform a millisecond to tick conversion. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga7484d4be4877b94a687f4410fccc6271\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga7484d4be4877b94a687f4410fccc6271\">◆&nbsp;<\/a><\/span>sl_sleeptimer_ms32_to_tick()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_ms32_to_tick <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>time_ms, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>tick&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts 32-bits milliseconds in ticks. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>time_ms<\/code><\/td><td>Number of milliseconds. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>tick<\/code><\/td><td>Pointer to the converted tick number.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The result is \"rounded\" to the superior tick number. If possible the <a href=\"#gadf3a3eb05b0f5adbc7ee488113299f61\" class=\"el\" title=\"Converts milliseconds in ticks.\">sl_sleeptimer_ms_to_tick()<\/a> function should be used.<\/dd>\n<dd>\nThis function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'time_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\" title=\"Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argume...\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'time_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga3218039eab8d09231cc092fdc2a1dba5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\">◆&nbsp;<\/a><\/span>sl_sleeptimer_get_max_ms32_conversion()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_get_max_ms32_conversion <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argument expressed in milliseconds. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Maximum time or timeout value in milliseconds. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga2c2a2a131e401894d3e09513442667b5\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga2c2a2a131e401894d3e09513442667b5\">◆&nbsp;<\/a><\/span>sl_sleeptimer_tick_to_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">uint32_t sl_sleeptimer_tick_to_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>tick<\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts ticks in milliseconds. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>tick<\/code><\/td><td>Number of tick.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>Corresponding milliseconds number.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The result is rounded to the inferior millisecond. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga6882d0577137d8e20ec531be45678fba\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga6882d0577137d8e20ec531be45678fba\">◆&nbsp;<\/a><\/span>sl_sleeptimer_tick64_to_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_tick64_to_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">uint64_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>tick, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint64_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>ms&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Converts 64-bit ticks in milliseconds. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>tick<\/code><\/td><td>Number of tick. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>ms<\/code><\/td><td>Pointer to the converted milliseconds number.<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>The result is rounded to the inferior millisecond. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga0b38592836a9a01d6f315d417d3d6cd9\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga0b38592836a9a01d6f315d417d3d6cd9\">◆&nbsp;<\/a><\/span>sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">bool sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">void&nbsp;<\/td>\n          <td class=\"paramname\"><code><\/code><\/td><td>)<\/td>\n          <td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Allow sleep after ISR exit. <\/p>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>true if sleep is allowed after ISR exit. False otherwise. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gac8c20444c4572f93db0fb3ad3bc2305e\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gac8c20444c4572f93db0fb3ad3bc2305e\">◆&nbsp;<\/a><\/span>sl_sleeptimer_start_timer_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_start_timer_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout_ms, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Starts a 32 bits timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout_ms<\/code><\/td><td>Timer timeout, in milliseconds. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\" title=\"Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argume...\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga3f3cefcf3dba6d516ca69444d25d8c09\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga3f3cefcf3dba6d516ca69444d25d8c09\">◆&nbsp;<\/a><\/span>sl_sleeptimer_restart_timer_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_restart_timer_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout_ms, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Restarts a 32 bits timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout_ms<\/code><\/td><td>Timer timeout, in milliseconds. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\" title=\"Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argume...\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"gae4639653b4bf4ed68049b2a12a6c6d83\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gae4639653b4bf4ed68049b2a12a6c6d83\">◆&nbsp;<\/a><\/span>sl_sleeptimer_start_periodic_timer_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_start_periodic_timer_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout_ms, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Starts a 32 bits periodic timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout_ms<\/code><\/td><td>Timer periodic timeout, in milliseconds. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\" title=\"Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argume...\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<a id=\"ga1a44174e7a8eccbabde499875cb8462a\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga1a44174e7a8eccbabde499875cb8462a\">◆&nbsp;<\/a><\/span>sl_sleeptimer_restart_periodic_timer_ms()<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n<table class=\"mlabels\">\n  <tbody><tr>\n  <td class=\"mlabels-left\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">sl_status_t sl_sleeptimer_restart_periodic_timer_ms <\/td>\n          <td>(<\/td>\n          <td class=\"paramtype\">sl_sleeptimer_timer_handle_t *&nbsp;<\/td>\n          <td class=\"paramname\"><code>handle, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint32_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>timeout_ms, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\" class=\"el\">sl_sleeptimer_timer_callback_t<\/a>&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">void *&nbsp;<\/td>\n          <td class=\"paramname\"><code>callback_data, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint8_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>priority, <\/code><\/td>\n        <\/tr>\n        <tr>\n          <td class=\"paramkey\"><\/td>\n          <td><\/td>\n          <td class=\"paramtype\">uint16_t&nbsp;<\/td>\n          <td class=\"paramname\"><code>option_flags&nbsp;<\/code><\/td>\n        <\/tr>\n        <tr>\n          <td><\/td>\n          <td>)<\/td>\n          <td><\/td><td><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n  <\/td>\n  <td class=\"mlabels-right\">\n<span class=\"mlabels\"><span class=\"mlabel\">inline<\/span><\/span>  <\/td>\n  <\/tr>\n<\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Restarts a 32 bits periodic timer. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>Pointer to handle to timer. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>timeout_ms<\/code><\/td><td>Timer periodic timeout, in milliseconds. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback<\/code><\/td><td>Callback function that will be called when initial/periodic timeout expires. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>callback_data<\/code><\/td><td>Pointer to user data that will be passed to callback. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>priority<\/code><\/td><td>Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/td><\/tr>\n    <tr><td class=\"paramname\"><code>option_flags<\/code><\/td><td>Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<ul>\n<li>SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/li>\n<\/ul>\n<\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n<dl class=\"section return\"><dt>Returns<\/dt><dd>0 if successful. Error code otherwise.<\/dd><\/dl>\n<dl class=\"section note\"><dt>Note<\/dt><dd>This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"#ga3218039eab8d09231cc092fdc2a1dba5\" class=\"el\" title=\"Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argume...\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/dd><\/dl>\n\n<\/div>\n<\/div>\n<h2 class=\"groupheader\">Typedef Documentation<\/h2>\n<a id=\"gaf41c2bc4240e5b819fc7f285f62172a2\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\">◆&nbsp;<\/a><\/span>sl_sleeptimer_timestamp_t<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">typedef uint32_t <a href=\"#gaf41c2bc4240e5b819fc7f285f62172a2\" class=\"el\">sl_sleeptimer_timestamp_t<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Timestamp, wall clock time in seconds. <\/p>\n\n<\/div>\n<\/div>\n<a id=\"ga27148a3d37b9f3728cbd18b56b4c9979\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\">◆&nbsp;<\/a><\/span>sl_sleeptimer_time_zone_offset_t<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">typedef int32_t <a href=\"#ga27148a3d37b9f3728cbd18b56b4c9979\" class=\"el\">sl_sleeptimer_time_zone_offset_t<\/a><\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Time zone offset from UTC(second). <\/p>\n\n<\/div>\n<\/div>\n<a id=\"ga9049589e4153204fb3e97cbe1ecda89b\"><\/a>\n<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#ga9049589e4153204fb3e97cbe1ecda89b\">◆&nbsp;<\/a><\/span>sl_sleeptimer_timer_callback_t<\/h2>\n\n<div class=\"memitem\">\n<div class=\"memproto\">\n      <table class=\"memname\">\n        <tbody><tr>\n          <td class=\"memname\">typedef void(* sl_sleeptimer_timer_callback_t) (sl_sleeptimer_timer_handle_t *handle, void *data)<\/td>\n        <\/tr>\n      <\/tbody><\/table>\n<\/div><div class=\"memdoc\">\n\n<p>Typedef for the user supplied callback function which is called when a timer expires. <\/p>\n<dl class=\"params\"><dt>Parameters<\/dt><dd>\n  <table class=\"params\">\n    <tbody><tr><td class=\"paramname\"><code>handle<\/code><\/td><td>The timer handle.<\/td><\/tr>\n    <tr><td class=\"paramname\"><code>data<\/code><\/td><td>An extra parameter for the user application. <\/td><\/tr>\n  <\/tbody><\/table>\n  <\/dd>\n<\/dl>\n\n<\/div>\n<\/div>\n<\/div>\n      <div ub-in-page=\"6062051aebaf71079a7b414b\"><\/div>\n      <\/article>\n    ","url":"http://docs.silabs.com/gecko-platform/4.0/service/api/group-sleeptimer","status":"success"}
